******Mandatabase**********      Name of Programmer: Cassandra Lundberg  Email of Programmer: clundberg3@student.gsu.edu

LS(1)                                              User Commands                                              LS(1)



NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List information about the FILEs (the current directory by default).  Sort entries alphabetically if none of
       -cftuvSUX nor --sort is specified.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

       --author
              with -l, print the author of each file

       -b, --escape
              print C-style escapes for nongraphic characters

       --block-size=SIZE
              scale sizes by SIZE before printing them; e.g., '--block-size=M' prints sizes in units  of  1,048,576
              bytes; see SIZE format below

       -B, --ignore-backups
              do not list implied entries ending with ~

       -c     with  -lt:  sort by, and show, ctime (time of last modification of file status information); with -l:
              show ctime and sort by name; otherwise: sort by ctime, newest first

       -C     list entries by columns

       --color[=WHEN]
              colorize the output; WHEN can be 'never', 'auto', or 'always' (the default); more info below

       -d, --directory
              list directories themselves, not their contents

       -D, --dired
              generate output designed for Emacs' dired mode

       -f     do not sort, enable -aU, disable -ls --color

       -F, --classify
              append indicator (one of */=>@|) to entries

       --file-type
              likewise, except do not append '*'

       --format=WORD
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l, vertical -C

       --full-time
              like -l --time-style=full-iso

       -g     like -l, but do not list owner

       --group-directories-first
              group directories before files;

              can be augmented with a --sort option, but any use of --sort=none (-U) disables grouping

       -G, --no-group
              in a long listing, don't print group names

       -h, --human-readable
              with -l, print sizes in human readable format (e.g., 1K 234M 2G)

       --si   likewise, but use powers of 1000 not 1024

       -H, --dereference-command-line
              follow symbolic links listed on the command line

       --dereference-command-line-symlink-to-dir
              follow each command line symbolic link

              that points to a directory

       --hide=PATTERN
              do not list implied entries matching shell PATTERN (overridden by -a or -A)

       --indicator-style=WORD
              append indicator with style WORD to entry names: none (default), slash (-p), file-type (--file-type),
              classify (-F)

       -i, --inode
              print the index number of each file

       -I, --ignore=PATTERN
              do not list implied entries matching shell PATTERN

       -k, --kibibytes
              default to 1024-byte blocks for disk usage

       -l     use a long listing format

       -L, --dereference
              when  showing file information for a symbolic link, show information for the file the link references
              rather than for the link itself

       -m     fill width with a comma separated list of entries

       -n, --numeric-uid-gid
              like -l, but list numeric user and group IDs

       -N, --literal
              print raw entry names (don't treat e.g. control characters specially)

       -o     like -l, but do not list group information

       -p, --indicator-style=slash
              append / indicator to directories

       -q, --hide-control-chars
              print ? instead of nongraphic characters

       --show-control-chars
              show nongraphic characters as-is (the default, unless program is 'ls' and output is a terminal)

       -Q, --quote-name
              enclose entry names in double quotes

       --quoting-style=WORD
              use quoting style WORD for entry names: literal, locale, shell, shell-always, c, escape

       -r, --reverse
              reverse order while sorting

       -R, --recursive
              list subdirectories recursively

       -s, --size
              print the allocated size of each file, in blocks

       -S     sort by file size

       --sort=WORD
              sort by WORD instead of name: none (-U), size (-S), time (-t), version (-v), extension (-X)

       --time=WORD
              with -l, show time as WORD instead of default modification time: atime or access or use (-u) ctime or
              status (-c); also use specified time as sort key if --sort=time

       --time-style=STYLE
              with  -l, show times using style STYLE: full-iso, long-iso, iso, locale, or +FORMAT; FORMAT is inter‐
              preted like in 'date'; if FORMAT is FORMAT1<newline>FORMAT2, then FORMAT1 applies to non-recent files
              and  FORMAT2 to recent files; if STYLE is prefixed with 'posix-', STYLE takes effect only outside the
              POSIX locale

       -t     sort by modification time, newest first

       -T, --tabsize=COLS
              assume tab stops at each COLS instead of 8

       -u     with -lt: sort by, and show, access time; with -l: show access time and sort by name; otherwise: sort
              by access time

       -U     do not sort; list entries in directory order

       -v     natural sort of (version) numbers within text

       -w, --width=COLS
              assume screen width instead of current value

       -x     list entries by lines instead of by columns

       -X     sort alphabetically by entry extension

       -1     list one file per line

       SELinux options:

       --lcontext
              Display security context.   Enable -l. Lines will probably be too wide for most displays.

       -Z, --context
              Display security context so it fits on most displays.  Displays only mode, user, group, security con‐
              text and file name.

       --scontext
              Display only security context and file name.

       --help display this help and exit

       --version
              output version information and exit

       SIZE is an integer and optional unit (example: 10M is 10*1024*1024).  Units are K, M, G, T, P, E, Z, Y (pow‐
       ers of 1024) or KB, MB, ... (powers of 1000).

       Using  color  to  distinguish  file  types  is  disabled  both  by  default  and  with  --color=never.  With
       --color=auto, ls emits color codes only when standard output is connected  to  a  terminal.   The  LS_COLORS
       environment variable can change the settings.  Use the dircolors command to set it.

   Exit status:
       0      if OK,

       1      if minor problems (e.g., cannot access subdirectory),

       2      if serious trouble (e.g., cannot access command-line argument).

       GNU   coreutils   online  help:  <http://www.gnu.org/software/coreutils/>  Report  ls  translation  bugs  to
       <http://translationproject.org/team/>

AUTHOR
       Written by Richard M. Stallman and David MacKenzie.

COPYRIGHT
       Copyright  ©  2013  Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version   3   or   later
       <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent per‐
       mitted by law.

SEE ALSO
       The full documentation for ls is maintained as a Texinfo manual.  If the info and ls programs  are  properly
       installed at your site, the command

              info coreutils 'ls invocation'

       should give you access to the complete manual.



GNU coreutils 8.22                                 November 2020                                              LS(1)
PWD(1)                                             User Commands                                             PWD(1)



NAME
       pwd - print name of current/working directory

SYNOPSIS
       pwd [OPTION]...

DESCRIPTION
       Print the full filename of the current working directory.

       -L, --logical
              use PWD from environment, even if it contains symlinks

       -P, --physical
              avoid all symlinks

       --help display this help and exit

       --version
              output version information and exit

       NOTE:  your  shell  may  have  its  own version of pwd, which usually supersedes the version described here.
       Please refer to your shell's documentation for details about the options it supports.

       GNU  coreutils  online  help:  <http://www.gnu.org/software/coreutils/>  Report  pwd  translation  bugs   to
       <http://translationproject.org/team/>

AUTHOR
       Written by Jim Meyering.

COPYRIGHT
       Copyright   ©   2013   Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version  3  or  later
       <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent per‐
       mitted by law.

SEE ALSO
       getcwd(3)

       The full documentation for pwd is maintained as a Texinfo manual.  If the info and pwd programs are properly
       installed at your site, the command

              info coreutils 'pwd invocation'

       should give you access to the complete manual.



GNU coreutils 8.22                                 November 2020                                             PWD(1)
BASH_BUILTINS(1)                              General Commands Manual                              BASH_BUILTINS(1)



NAME
       bash,  :,  ., [, alias, bg, bind, break, builtin, caller, cd, command, compgen, complete, compopt, continue,
       declare, dirs, disown, echo, enable, eval, exec, exit, export, false, fc, fg, getopts, hash, help,  history,
       jobs,  kill,  let,  local,  logout,  mapfile,  popd, printf, pushd, pwd, read, readonly, return, set, shift,
       shopt, source, suspend, test, times, trap, true, type, typeset, ulimit, umask, unalias, unset, wait  -  bash
       built-in commands, see bash(1)

BASH BUILTIN COMMANDS
       Unless  otherwise  noted, each builtin command documented in this section as accepting options preceded by -
       accepts -- to signify the end of the options.  The :, true, false, and test builtins do not  accept  options
       and  do  not  treat  --  specially.   The  exit, logout, break, continue, let, and shift builtins accept and
       process arguments beginning with - without requiring --.  Other builtins that accept arguments but  are  not
       specified  as  accepting  options  interpret arguments beginning with - as invalid options and require -- to
       prevent this interpretation.
       : [arguments]
              No effect; the command does nothing beyond expanding arguments and performing any specified  redirec‐
              tions.  A zero exit code is returned.

        .  filename [arguments]
       source filename [arguments]
              Read  and  execute commands from filename in the current shell environment and return the exit status
              of the last command executed from filename.  If filename does not contain a slash, file names in PATH
              are  used  to find the directory containing filename.  The file searched for in PATH need not be exe‐
              cutable.  When bash is not in posix mode, the current directory is searched if no file  is  found  in
              PATH.  If the sourcepath option to the shopt builtin command is turned off, the PATH is not searched.
              If any arguments are supplied, they become the positional parameters when filename is executed.  Oth‐
              erwise  the positional parameters are unchanged.  The return status is the status of the last command
              exited within the script (0 if no commands are executed), and false if filename is not found or  can‐
              not be read.

       alias [-p] [name[=value] ...]
              Alias with no arguments or with the -p option prints the list of aliases in the form alias name=value
              on standard output.  When arguments are supplied, an alias is defined for each name  whose  value  is
              given.  A trailing space in  value causes the next word to be checked for alias substitution when the
              alias is expanded.  For each name in the argument list for which no value is supplied, the  name  and
              value of the alias is printed.  Alias returns true unless a name is given for which no alias has been
              defined.

       bg [jobspec ...]
              Resume each suspended job jobspec in the background, as if it had been started with &.  If jobspec is
              not present, the shell's notion of the current job is used.  bg jobspec returns 0 unless run when job
              control is disabled or, when run with job control enabled, any specified jobspec was not found or was
              started without job control.

       bind [-m keymap] [-lpsvPSV]
       bind [-m keymap] [-q function] [-u function] [-r keyseq]
       bind [-m keymap] -f filename
       bind [-m keymap] -x keyseq:shell-command
       bind [-m keymap] keyseq:function-name
       bind readline-command
              Display  current  readline  key  and function bindings, bind a key sequence to a readline function or
              macro, or set a readline variable.  Each non-option argument is a  command  as  it  would  appear  in
              .inputrc,  but  each  binding  or  command  must be passed as a separate argument; e.g., '"\C-x\C-r":
              re-read-init-file'.  Options, if supplied, have the following meanings:
              -m keymap
                     Use keymap as the keymap to be affected by the subsequent bindings.  Acceptable  keymap  names
                     are emacs, emacs-standard, emacs-meta, emacs-ctlx, vi, vi-move, vi-command, and vi-insert.  vi
                     is equivalent to vi-command; emacs is equivalent to emacs-standard.
              -l     List the names of all readline functions.
              -p     Display readline function names and bindings in such a way that they can be re-read.
              -P     List current readline function names and bindings.
              -s     Display readline key sequences bound to macros and the strings they output in such a way  that
                     they can be re-read.
              -S     Display readline key sequences bound to macros and the strings they output.
              -v     Display readline variable names and values in such a way that they can be re-read.
              -V     List current readline variable names and values.
              -f filename
                     Read key bindings from filename.
              -q function
                     Query about which keys invoke the named function.
              -u function
                     Unbind all keys bound to the named function.
              -r keyseq
                     Remove any current binding for keyseq.
              -x keyseq:shell-command
                     Cause  shell-command  to  be  executed whenever keyseq is entered.  When shell-command is exe‐
                     cuted, the shell sets the READLINE_LINE variable to the contents of the readline  line  buffer
                     and  the  READLINE_POINT variable to the current location of the insertion point.  If the exe‐
                     cuted command changes the value of READLINE_LINE or READLINE_POINT, those new values  will  be
                     reflected in the editing state.

              The return value is 0 unless an unrecognized option is given or an error occurred.

       break [n]
              Exit  from within a for, while, until, or select loop.  If n is specified, break n levels.  n must be
              ≥ 1.  If n is greater than the number of enclosing loops, all enclosing loops are exited.  The return
              value is non-zero when n is ≤ 0; Otherwise, break returns 0 value.

       builtin shell-builtin [arguments]
              Execute  the specified shell builtin, passing it arguments, and return its exit status.  This is use‐
              ful when defining a function whose name is the same as a shell builtin, retaining  the  functionality
              of  the builtin within the function.  The cd builtin is commonly redefined this way.  The return sta‐
              tus is false if shell-builtin is not a shell builtin command.

       caller [expr]
              Returns the context of any active subroutine call (a shell function or a script executed with  the  .
              or  source  builtins).  Without expr, caller displays the line number and source filename of the cur‐
              rent subroutine call.  If a non-negative integer is supplied as expr, caller displays the  line  num‐
              ber,  subroutine  name,  and source file corresponding to that position in the current execution call
              stack.  This extra information may be used, for example, to print a stack trace.  The  current  frame
              is  frame  0.  The return value is 0 unless the shell is not executing a subroutine call or expr does
              not correspond to a valid position in the call stack.

       cd [-L|[-P [-e]]] [dir]
              Change the current directory to dir.  The variable HOME is the  default  dir.   The  variable  CDPATH
              defines  the search path for the directory containing dir.  Alternative directory names in CDPATH are
              separated by a colon (:).  A null directory name in CDPATH is the  same  as  the  current  directory,
              i.e.,  ``.''.  If dir begins with a slash (/), then CDPATH is not used. The -P option says to use the
              physical directory structure instead of following symbolic links (see also the -P option to  the  set
              builtin  command);  the -L option forces symbolic links to be followed.  If the -e option is supplied
              with -P, and the current working directory cannot  be  successfully  determined  after  a  successful
              directory  change, cd will return an unsuccessful status.  An argument of - is equivalent to $OLDPWD.
              If a non-empty directory name from CDPATH is used, or if - is the first argument, and  the  directory
              change  is  successful, the absolute pathname of the new working directory is written to the standard
              output.  The return value is true if the directory was successfully changed; false otherwise.

       command [-pVv] command [arg ...]
              Run command with args suppressing the normal shell function lookup. Only builtin commands or commands
              found in the PATH are executed.  If the -p option is given, the search for command is performed using
              a default value for PATH that is guaranteed to find all of the standard utilities.  If either the  -V
              or  -v  option  is supplied, a description of command is printed.  The -v option causes a single word
              indicating the command or file name used to invoke command to be displayed; the -V option produces  a
              more  verbose  description.   If the -V or -v option is supplied, the exit status is 0 if command was
              found, and 1 if not.  If neither option is supplied and an error occurred or command cannot be found,
              the exit status is 127.  Otherwise, the exit status of the command builtin is the exit status of com‐
              mand.

       compgen [option] [word]
              Generate possible completion matches for word according to the  options,  which  may  be  any  option
              accepted  by the complete builtin with the exception of -p and -r, and write the matches to the stan‐
              dard output.  When using the -F or -C options, the various shell variables set  by  the  programmable
              completion facilities, while available, will not have useful values.

              The  matches  will  be generated in the same way as if the programmable completion code had generated
              them directly from a completion specification with the same flags.  If word is specified, only  those
              completions matching word will be displayed.

              The return value is true unless an invalid option is supplied, or no matches were generated.

       complete  [-abcdefgjksuv]  [-o  comp-option]  [-DE] [-A action] [-G globpat] [-W wordlist] [-F function] [-C
       command]
              [-X filterpat] [-P prefix] [-S suffix] name [name ...]
       complete -pr [-DE] [name ...]
              Specify how arguments to each name should be completed.  If the -p  option  is  supplied,  or  if  no
              options  are supplied, existing completion specifications are printed in a way that allows them to be
              reused as input.  The -r option removes a completion specification for each name, or, if no names are
              supplied,  all  completion  specifications.   The  -D option indicates that the remaining options and
              actions should apply to the ``default'' command completion; that is, completion attempted on  a  com‐
              mand for which no completion has previously been defined.  The -E option indicates that the remaining
              options and actions should apply to ``empty'' command completion; that is, completion attempted on  a
              blank line.

              The  process  of  applying  these  completion  specifications  when  word  completion is attempted is
              described above under Programmable Completion.

              Other options, if specified, have the following meanings.  The  arguments  to  the  -G,  -W,  and  -X
              options  (and,  if  necessary, the -P and -S options) should be quoted to protect them from expansion
              before the complete builtin is invoked.
              -o comp-option
                      The comp-option controls several aspects of the compspec's behavior beyond the simple genera‐
                      tion of completions.  comp-option may be one of:
                      bashdefault
                              Perform  the  rest  of  the  default  bash  completions  if the compspec generates no
                              matches.
                      default Use readline's default filename completion if the compspec generates no matches.
                      dirnames
                              Perform directory name completion if the compspec generates no matches.
                      filenames
                              Tell readline that the compspec generates filenames, so  it  can  perform  any  file‐
                              name-specific  processing  (like  adding  a slash to directory names, quoting special
                              characters, or suppressing trailing spaces).  Intended to be used  with  shell  func‐
                              tions.
                      nospace Tell  readline  not  to append a space (the default) to words completed at the end of
                              the line.
                      plusdirs
                              After any matches defined by the compspec are generated, directory name completion is
                              attempted and any matches are added to the results of the other actions.
              -A action
                      The action may be one of the following to generate a list of possible completions:
                      alias   Alias names.  May also be specified as -a.
                      arrayvar
                              Array variable names.
                      binding Readline key binding names.
                      builtin Names of shell builtin commands.  May also be specified as -b.
                      command Command names.  May also be specified as -c.
                      directory
                              Directory names.  May also be specified as -d.
                      disabled
                              Names of disabled shell builtins.
                      enabled Names of enabled shell builtins.
                      export  Names of exported shell variables.  May also be specified as -e.
                      file    File names.  May also be specified as -f.
                      function
                              Names of shell functions.
                      group   Group names.  May also be specified as -g.
                      helptopic
                              Help topics as accepted by the help builtin.
                      hostname
                              Hostnames, as taken from the file specified by the HOSTFILE shell variable.
                      job     Job names, if job control is active.  May also be specified as -j.
                      keyword Shell reserved words.  May also be specified as -k.
                      running Names of running jobs, if job control is active.
                      service Service names.  May also be specified as -s.
                      setopt  Valid arguments for the -o option to the set builtin.
                      shopt   Shell option names as accepted by the shopt builtin.
                      signal  Signal names.
                      stopped Names of stopped jobs, if job control is active.
                      user    User names.  May also be specified as -u.
                      variable
                              Names of all shell variables.  May also be specified as -v.
              -C command
                      command is executed in a subshell environment, and its output is used as the possible comple‐
                      tions.
              -F function
                      The shell function function is executed in the current shell environment.  When it  finishes,
                      the possible completions are retrieved from the value of the COMPREPLY array variable.
              -G globpat
                      The pathname expansion pattern globpat is expanded to generate the possible completions.
              -P prefix
                      prefix  is  added  at  the beginning of each possible completion after all other options have
                      been applied.
              -S suffix
                      suffix is appended to each possible completion after all other options have been applied.
              -W wordlist
                      The wordlist is split using the characters in the IFS special  variable  as  delimiters,  and
                      each  resultant  word is expanded.  The possible completions are the members of the resultant
                      list which match the word being completed.
              -X filterpat
                      filterpat is a pattern as used for pathname expansion.  It is applied to the list of possible
                      completions  generated  by  the preceding options and arguments, and each completion matching
                      filterpat is removed from the list.  A leading ! in filterpat negates the  pattern;  in  this
                      case, any completion not matching filterpat is removed.

              The  return value is true unless an invalid option is supplied, an option other than -p or -r is sup‐
              plied without a name argument, an attempt is made to remove a completion specification for a name for
              which no specification exists, or an error occurs adding a completion specification.

       compopt [-o option] [-DE] [+o option] [name]
              Modify completion options for each name according to the options, or for the currently-executing com‐
              pletion if no names are supplied.  If no options are given, display the completion options  for  each
              name  or  the  current  completion.   The  possible values of option are those valid for the complete
              builtin described above.  The -D option indicates that the remaining  options  should  apply  to  the
              ``default''  command  completion;  that is, completion attempted on a command for which no completion
              has previously been defined.  The -E option indicates that the  remaining  options  should  apply  to
              ``empty'' command completion; that is, completion attempted on a blank line.

              The  return  value  is  true  unless  an invalid option is supplied, an attempt is made to modify the
              options for a name for which no completion specification exists, or an output error occurs.

       continue [n]
              Resume the next iteration of the enclosing for, while, until, or select loop.   If  n  is  specified,
              resume  at  the  nth  enclosing  loop.   n must be ≥ 1.  If n is greater than the number of enclosing
              loops, the last enclosing loop (the ``top-level'' loop) is resumed.  When continue is executed inside
              of  loop,  the return value is non-zero when n is ≤ 0; Otherwise, continue returns 0 value. When con‐
              tinue is executed outside of loop, the return value is 0.

       declare [-aAfFgilrtux] [-p] [name[=value] ...]
       typeset [-aAfFgilrtux] [-p] [name[=value] ...]
              Declare variables and/or give them attributes.  If no names are given  then  display  the  values  of
              variables.   The -p option will display the attributes and values of each name.  When -p is used with
              name arguments, additional options are ignored.  When -p is supplied without name arguments, it  will
              display  the attributes and values of all variables having the attributes specified by the additional
              options.  If no other options are supplied with -p, declare will display the attributes and values of
              all  shell  variables.   The  -f  option will restrict the display to shell functions.  The -F option
              inhibits the display of function definitions; only the function name and attributes are printed.   If
              the  extdebug  shell  option  is  enabled using shopt, the source file name and line number where the
              function is defined are displayed as well.  The -F option implies -f.  The -g option forces variables
              to be created or modified at the global scope, even when declare is executed in a shell function.  It
              is ignored in all other cases.  The following options can be used to  restrict  output  to  variables
              with the specified attribute or to give variables attributes:
              -a     Each name is an indexed array variable (see Arrays above).
              -A     Each name is an associative array variable (see Arrays above).
              -f     Use function names only.
              -i     The variable is treated as an integer; arithmetic evaluation (see ARITHMETIC EVALUATION above)
                     is performed when the variable is assigned a value.
              -l     When the variable is assigned a value, all upper-case characters are converted to  lower-case.
                     The upper-case attribute is disabled.
              -r     Make  names  readonly.   These  names  cannot then be assigned values by subsequent assignment
                     statements or unset.
              -t     Give each name the trace attribute.  Traced functions inherit the DEBUG and RETURN traps  from
                     the calling shell.  The trace attribute has no special meaning for variables.
              -u     When  the variable is assigned a value, all lower-case characters are converted to upper-case.
                     The lower-case attribute is disabled.
              -x     Mark names for export to subsequent commands via the environment.

              Using `+' instead of `-' turns off the attribute instead, with the exceptions that +a may not be used
              to destroy an array variable and +r will not remove the readonly attribute.  When used in a function,
              makes each name local, as with the local command, unless the -g option is  supplied,  If  a  variable
              name  is followed by =value, the value of the variable is set to value.  The return value is 0 unless
              an invalid option is encountered, an attempt is made to define a function using  ``-f  foo=bar'',  an
              attempt  is made to assign a value to a readonly variable, an attempt is made to assign a value to an
              array variable without using the compound assignment syntax (see Arrays above), one of the  names  is
              not  a valid shell variable name, an attempt is made to turn off readonly status for a readonly vari‐
              able, an attempt is made to turn off array status for an array variable, or an  attempt  is  made  to
              display a non-existent function with -f.

       dirs [+n] [-n] [-clpv]
              Without  options, displays the list of currently remembered directories.  The default display is on a
              single line with directory names separated by spaces.  Directories are added to  the  list  with  the
              pushd command; the popd command removes entries from the list.
              +n     Displays  the  nth entry counting from the left of the list shown by dirs when invoked without
                     options, starting with zero.
              -n     Displays the nth entry counting from the right of the list shown by dirs when invoked  without
                     options, starting with zero.
              -c     Clears the directory stack by deleting all of the entries.
              -l     Produces  a  longer listing; the default listing format uses a tilde to denote the home direc‐
                     tory.
              -p     Print the directory stack with one entry per line.
              -v     Print the directory stack with one entry per line, prefixing each entry with its index in  the
                     stack.

              The  return value is 0 unless an invalid option is supplied or n indexes beyond the end of the direc‐
              tory stack.

       disown [-ar] [-h] [jobspec ...]
              Without options, each jobspec is removed from the table of active jobs.  If jobspec is  not  present,
              and  neither  -a nor -r is supplied, the shell's notion of the current job is used.  If the -h option
              is given, each jobspec is not removed from the table, but is marked so that SIGHUP is not sent to the
              job  if  the shell receives a SIGHUP.  If no jobspec is present, and neither the -a nor the -r option
              is supplied, the current job is used.  If no jobspec is supplied, the -a option means  to  remove  or
              mark  all  jobs;  the  -r option without a jobspec argument restricts operation to running jobs.  The
              return value is 0 unless a jobspec does not specify a valid job.

       echo [-neE] [arg ...]
              Output the args, separated by spaces, followed by a newline.  The return status is always 0.   If  -n
              is  specified,  the trailing newline is suppressed.  If the -e option is given, interpretation of the
              following backslash-escaped characters is enabled.  The -E  option  disables  the  interpretation  of
              these  escape  characters, even on systems where they are interpreted by default.  The xpg_echo shell
              option may be used to dynamically determine whether or not echo expands these  escape  characters  by
              default.   echo  does  not  interpret  --  to mean the end of options.  echo interprets the following
              escape sequences:
              \a     alert (bell)
              \b     backspace
              \c     suppress further output
              \e
              \E     an escape character
              \f     form feed
              \n     new line
              \r     carriage return
              \t     horizontal tab
              \v     vertical tab
              \\     backslash
              \0nnn  the eight-bit character whose value is the octal value nnn (zero to three octal digits)
              \xHH   the eight-bit character whose value is the hexadecimal value HH (one or two hex digits)
              \uHHHH the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value HHHH (one  to  four
                     hex digits)
              \UHHHHHHHH
                     the  Unicode  (ISO/IEC  10646) character whose value is the hexadecimal value HHHHHHHH (one to
                     eight hex digits)

       enable [-a] [-dnps] [-f filename] [name ...]
              Enable and disable builtin shell commands.  Disabling a builtin allows a disk command which  has  the
              same name as a shell builtin to be executed without specifying a full pathname, even though the shell
              normally searches for builtins before disk commands.  If -n is used, each name  is  disabled;  other‐
              wise, names are enabled.  For example, to use the test binary found via the PATH instead of the shell
              builtin version, run ``enable -n test''.  The -f option means to load the new  builtin  command  name
              from  shared  object  filename, on systems that support dynamic loading.  The -d option will delete a
              builtin previously loaded with -f.  If no name arguments are given, or if the -p option is  supplied,
              a  list  of  shell  builtins  is  printed.   With no other option arguments, the list consists of all
              enabled shell builtins.  If -n is supplied, only disabled builtins are printed.  If -a  is  supplied,
              the  list printed includes all builtins, with an indication of whether or not each is enabled.  If -s
              is supplied, the output is restricted to the POSIX special builtins.  The return value is 0 unless  a
              name is not a shell builtin or there is an error loading a new builtin from a shared object.

       eval [arg ...]
              The  args  are  read  and concatenated together into a single command.  This command is then read and
              executed by the shell, and its exit status is returned as the value of eval.  If there are  no  args,
              or only null arguments, eval returns 0.

       exec [-cl] [-a name] [command [arguments]]
              If command is specified, it replaces the shell.  No new process is created.  The arguments become the
              arguments to command.  If the -l option is supplied, the shell places a dash at the beginning of  the
              zeroth  argument  passed to command.  This is what login(1) does.  The -c option causes command to be
              executed with an empty environment.  If -a is supplied, the shell passes name as the zeroth  argument
              to  the  executed  command.   If  command cannot be executed for some reason, a non-interactive shell
              exits, unless the shell option execfail is enabled, in which case it returns failure.  An interactive
              shell  returns failure if the file cannot be executed.  If command is not specified, any redirections
              take effect in the current shell, and the return status is 0.  If there is a redirection  error,  the
              return status is 1.

       exit [n]
              Cause  the  shell  to  exit with a status of n.  If n is omitted, the exit status is that of the last
              command executed.  A trap on EXIT is executed before the shell terminates.

       export [-fn] [name[=word]] ...
       export -p
              The supplied names are marked for automatic export to the environment of subsequently  executed  com‐
              mands.  If the -f option is given, the names refer to functions.  If no names are given, or if the -p
              option is supplied, a list of all names that are exported in this shell is printed.   The  -n  option
              causes  the  export  property to be removed from each name.  If a variable name is followed by =word,
              the value of the variable is set to word.  export returns an exit  status  of  0  unless  an  invalid
              option  is encountered, one of the names is not a valid shell variable name, or -f is supplied with a
              name that is not a function.

       fc [-e ename] [-lnr] [first] [last]
       fc -s [pat=rep] [cmd]
              Fix Command.  In the first form, a range of commands from first to last is selected from the  history
              list.   First  and  last may be specified as a string (to locate the last command beginning with that
              string) or as a number (an index into the history list, where a negative number is used as an  offset
              from  the  current  command  number).   If last is not specified it is set to the current command for
              listing (so that ``fc -l -10'' prints the last 10 commands) and to first otherwise.  If first is  not
              specified it is set to the previous command for editing and -16 for listing.

              The  -n  option suppresses the command numbers when listing.  The -r option reverses the order of the
              commands.  If the -l option is given, the commands are listed on  standard  output.   Otherwise,  the
              editor  given  by  ename  is invoked on a file containing those commands.  If ename is not given, the
              value of the FCEDIT variable is used, and the value of EDITOR if FCEDIT is not set.  If neither vari‐
              able is set, is used.  When editing is complete, the edited commands are echoed and executed.

              In  the  second form, command is re-executed after each instance of pat is replaced by rep.  A useful
              alias to use with this is ``r="fc -s"'', so that typing ``r cc'' runs the last command beginning with
              ``cc'' and typing ``r'' re-executes the last command.

              If  the first form is used, the return value is 0 unless an invalid option is encountered or first or
              last specify history lines out of range.  If the -e option is supplied, the return value is the value
              of  the  last command executed or failure if an error occurs with the temporary file of commands.  If
              the second form is used, the return status is that of the command re-executed, unless  cmd  does  not
              specify a valid history line, in which case fc returns failure.

       fg [jobspec]
              Resume  jobspec  in  the  foreground,  and  make  it the current job.  If jobspec is not present, the
              shell's notion of the current job is used.  The return value is that of the command placed  into  the
              foreground,  or failure if run when job control is disabled or, when run with job control enabled, if
              jobspec does not specify a valid job or jobspec specifies a job that was started without job control.

       getopts optstring name [args]
              getopts is used by shell procedures to parse positional parameters.  optstring  contains  the  option
              characters to be recognized; if a character is followed by a colon, the option is expected to have an
              argument, which should be separated from it by white space.  The colon and question  mark  characters
              may not be used as option characters.  Each time it is invoked, getopts places the next option in the
              shell variable name, initializing name if it does not exist, and the index of the next argument to be
              processed into the variable OPTIND.  OPTIND is initialized to 1 each time the shell or a shell script
              is invoked.  When an option requires an argument, getopts places  that  argument  into  the  variable
              OPTARG.   The  shell  does not reset OPTIND automatically; it must be manually reset between multiple
              calls to getopts within the same shell invocation if a new set of parameters is to be used.

              When the end of options is encountered, getopts exits with a return value greater than zero.   OPTIND
              is set to the index of the first non-option argument, and name is set to ?.

              getopts  normally  parses the positional parameters, but if more arguments are given in args, getopts
              parses those instead.

              getopts can report errors in two ways.  If the first character of optstring is a colon, silent  error
              reporting is used.  In normal operation diagnostic messages are printed when invalid options or miss‐
              ing option arguments are encountered.  If the variable OPTERR is set to 0, no error messages will  be
              displayed, even if the first character of optstring is not a colon.

              If  an invalid option is seen, getopts places ? into name and, if not silent, prints an error message
              and unsets OPTARG.  If getopts is silent, the option character found is placed in OPTARG and no diag‐
              nostic message is printed.

              If  a  required  argument  is  not found, and getopts is not silent, a question mark (?) is placed in
              name, OPTARG is unset, and a diagnostic message is printed.  If getopts is silent, then a  colon  (:)
              is placed in name and OPTARG is set to the option character found.

              getopts  returns  true if an option, specified or unspecified, is found.  It returns false if the end
              of options is encountered or an error occurs.

       hash [-lr] [-p filename] [-dt] [name]
              Each time hash is invoked, the full pathname of the command  name  is  determined  by  searching  the
              directories  in  $PATH  and  remembered.  Any previously-remembered pathname is discarded.  If the -p
              option is supplied, no path search is performed, and filename is used as the full file  name  of  the
              command.   The  -r  option causes the shell to forget all remembered locations.  The -d option causes
              the shell to forget the remembered location of each name.  If the -t option  is  supplied,  the  full
              pathname to which each name corresponds is printed.  If multiple name arguments are supplied with -t,
              the name is printed before the hashed full pathname.  The -l option causes output to be displayed  in
              a format that may be reused as input.  If no arguments are given, or if only -l is supplied, informa‐
              tion about remembered commands is printed.  The return status is true unless a name is not  found  or
              an invalid option is supplied.

       help [-dms] [pattern]
              Display  helpful  information  about  builtin commands.  If pattern is specified, help gives detailed
              help on all commands matching pattern; otherwise help for all the builtins and shell  control  struc‐
              tures is printed.
              -d     Display a short description of each pattern
              -m     Display the description of each pattern in a manpage-like format
              -s     Display only a short usage synopsis for each pattern

              The return status is 0 unless no command matches pattern.

       history [n]
       history -c
       history -d offset
       history -anrw [filename]
       history -p arg [arg ...]
       history -s arg [arg ...]
              With no options, display the command history list with line numbers.  Lines listed with a * have been
              modified.  An argument of n lists only the last n lines.  If the shell variable HISTTIMEFORMAT is set
              and not null, it is used as a format string for strftime(3) to display the time stamp associated with
              each displayed history entry.  No intervening blank is printed between the formatted time  stamp  and
              the  history  line.  If filename is supplied, it is used as the name of the history file; if not, the
              value of HISTFILE is used.  Options, if supplied, have the following meanings:
              -c     Clear the history list by deleting all the entries.
              -d offset
                     Delete the history entry at position offset.
              -a     Append the ``new'' history lines (history lines entered since the  beginning  of  the  current
                     bash session) to the history file.
              -n     Read  the  history lines not already read from the history file into the current history list.
                     These are lines appended to the history file since the beginning of the current bash session.
              -r     Read the contents of the history file and use them as the current history.
              -w     Write the current history to the history file, overwriting the history file's contents.
              -p     Perform history substitution on the following args and display the result on the standard out‐
                     put.  Does not store the results in the history list.  Each arg must be quoted to disable nor‐
                     mal history expansion.
              -s     Store the args in the history list as a single entry.  The last command in the history list is
                     removed before the args are added.

              If  the HISTTIMEFORMAT variable is set, the time stamp information associated with each history entry
              is written to the history file, marked with the history comment character.  When the history file  is
              read,  lines  beginning with the history comment character followed immediately by a digit are inter‐
              preted as timestamps for the previous history line.  The return value is 0 unless an  invalid  option
              is  encountered, an error occurs while reading or writing the history file, an invalid offset is sup‐
              plied as an argument to -d, or the history expansion supplied as an argument to -p fails.

       jobs [-lnprs] [ jobspec ... ]
       jobs -x command [ args ... ]
              The first form lists the active jobs.  The options have the following meanings:
              -l     List process IDs in addition to the normal information.
              -n     Display information only about jobs that have changed status since the user was last  notified
                     of their status.
              -p     List only the process ID of the job's process group leader.
              -r     Restrict output to running jobs.
              -s     Restrict output to stopped jobs.

              If  jobspec  is  given,  output  is restricted to information about that job.  The return status is 0
              unless an invalid option is encountered or an invalid jobspec is supplied.

              If the -x option is supplied, jobs replaces any jobspec found in command or args with the correspond‐
              ing process group ID, and executes command passing it args, returning its exit status.

       kill [-s sigspec | -n signum | -sigspec] [pid | jobspec] ...
       kill -l [sigspec | exit_status]
              Send  the  signal  named  by  sigspec or signum to the processes named by pid or jobspec.  sigspec is
              either a case-insensitive signal name such as SIGKILL (with or without the SIG prefix)  or  a  signal
              number;  signum is a signal number.  If sigspec is not present, then SIGTERM is assumed.  An argument
              of -l lists the signal names.  If any arguments are supplied when -l is given, the names of the  sig‐
              nals corresponding to the arguments are listed, and the return status is 0.  The exit_status argument
              to -l is a number specifying either a signal number or the exit status of a process terminated  by  a
              signal.   kill returns true if at least one signal was successfully sent, or false if an error occurs
              or an invalid option is encountered.

       let arg [arg ...]
              Each arg is an arithmetic expression to be evaluated (see ARITHMETIC EVALUATION above).  If the  last
              arg evaluates to 0, let returns 1; 0 is returned otherwise.

       local [option] [name[=value] ...]
              For each argument, a local variable named name is created, and assigned value.  The option can be any
              of the options accepted by declare.  When local is used within a function,  it  causes  the  variable
              name  to  have a visible scope restricted to that function and its children.  With no operands, local
              writes a list of local variables to the standard output.  It is an error to use local when not within
              a  function.  The return status is 0 unless local is used outside a function, an invalid name is sup‐
              plied, or name is a readonly variable.

       logout Exit a login shell.

       mapfile [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]
       readarray [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]
              Read lines from the standard input into the indexed array variable array, or from file descriptor  fd
              if the -u option is supplied.  The variable MAPFILE is the default array.  Options, if supplied, have
              the following meanings:
              -n     Copy at most count lines.  If count is 0, all lines are copied.
              -O     Begin assigning to array at index origin.  The default index is 0.
              -s     Discard the first count lines read.
              -t     Remove a trailing newline from each line read.
              -u     Read lines from file descriptor fd instead of the standard input.
              -C     Evaluate callback each time quantum lines are read.  The -c option specifies quantum.
              -c     Specify the number of lines read between each call to callback.

              If -C is specified without -c, the default quantum is 5000.  When callback is evaluated, it  is  sup‐
              plied  the index of the next array element to be assigned and the line to be assigned to that element
              as additional arguments.  callback is evaluated after the line is read but before the  array  element
              is assigned.

              If not supplied with an explicit origin, mapfile will clear array before assigning to it.

              mapfile  returns  successfully  unless  an  invalid  option  or option argument is supplied, array is
              invalid or unassignable, or if array is not an indexed array.

       popd [-n] [+n] [-n]
              Removes entries from the directory stack.  With no arguments, removes  the  top  directory  from  the
              stack,  and performs a cd to the new top directory.  Arguments, if supplied, have the following mean‐
              ings:
              -n     Suppresses the normal change of directory when removing directories from the  stack,  so  that
                     only the stack is manipulated.
              +n     Removes  the  nth  entry counting from the left of the list shown by dirs, starting with zero.
                     For example: ``popd +0'' removes the first directory, ``popd +1'' the second.
              -n     Removes the nth entry counting from the right of the list shown by dirs, starting  with  zero.
                     For example: ``popd -0'' removes the last directory, ``popd -1'' the next to last.

              If  the  popd  command  is successful, a dirs is performed as well, and the return status is 0.  popd
              returns false if an invalid option is encountered, the  directory  stack  is  empty,  a  non-existent
              directory stack entry is specified, or the directory change fails.

       printf [-v var] format [arguments]
              Write  the formatted arguments to the standard output under the control of the format.  The -v option
              causes the output to be assigned to the variable var rather than being printed to the  standard  out‐
              put.

              The  format  is a character string which contains three types of objects: plain characters, which are
              simply copied to standard output, character escape sequences, which are converted and copied  to  the
              standard  output,  and  format  specifications,  each of which causes printing of the next successive
              argument.  In addition to the standard printf(1) format specifications, printf interprets the follow‐
              ing extensions:
              %b     causes  printf to expand backslash escape sequences in the corresponding argument (except that
                     \c terminates output, backslashes in \', \", and \? are not removed, and octal escapes  begin‐
                     ning with \0 may contain up to four digits).
              %q     causes  printf  to  output  the corresponding argument in a format that can be reused as shell
                     input.
              %(datefmt)T
                     causes printf to output the date-time string resulting from using datefmt as a  format  string
                     for  strftime(3).  The corresponding argument is an integer representing the number of seconds
                     since the epoch.  Two special argument values may be used: -1 represents the current time, and
                     -2 represents the time the shell was invoked.

              Arguments  to  non-string format specifiers are treated as C constants, except that a leading plus or
              minus sign is allowed, and if the leading character is a single or double quote,  the  value  is  the
              ASCII value of the following character.

              The format is reused as necessary to consume all of the arguments.  If the format requires more argu‐
              ments than are supplied, the extra format specifications behave as if a zero value or null string, as
              appropriate, had been supplied.  The return value is zero on success, non-zero on failure.

       pushd [-n] [+n] [-n]
       pushd [-n] [dir]
              Adds  a  directory to the top of the directory stack, or rotates the stack, making the new top of the
              stack the current working directory.  With no  arguments,  exchanges  the  top  two  directories  and
              returns 0, unless the directory stack is empty.  Arguments, if supplied, have the following meanings:
              -n     Suppresses  the  normal change of directory when adding directories to the stack, so that only
                     the stack is manipulated.
              +n     Rotates the stack so that the nth directory (counting from the left of the list shown by dirs,
                     starting with zero) is at the top.
              -n     Rotates  the  stack  so  that  the nth directory (counting from the right of the list shown by
                     dirs, starting with zero) is at the top.
              dir    Adds dir to the directory stack at the top, making it the new current working directory.

              If the pushd command is successful, a dirs is performed as well.  If the first form  is  used,  pushd
              returns  0  unless  the  cd to dir fails.  With the second form, pushd returns 0 unless the directory
              stack is empty, a non-existent directory stack element is specified, or the directory change  to  the
              specified new current directory fails.

       pwd [-LP]
              Print  the absolute pathname of the current working directory.  The pathname printed contains no sym‐
              bolic links if the -P option is supplied or the -o physical option to  the  set  builtin  command  is
              enabled.  If the -L option is used, the pathname printed may contain symbolic links.  The return sta‐
              tus is 0 unless an error occurs while reading the name of the current directory or an invalid  option
              is supplied.

       read  [-ers]  [-a aname] [-d delim] [-i text] [-n nchars] [-N nchars] [-p prompt] [-t timeout] [-u fd] [name
       ...]
              One line is read from the standard input, or from the file descriptor fd supplied as an  argument  to
              the  -u option, and the first word is assigned to the first name, the second word to the second name,
              and so on, with leftover words and their intervening separators assigned to the last name.  If  there
              are fewer words read from the input stream than names, the remaining names are assigned empty values.
              The characters in IFS are used to split the line into words.  The backslash character (\) may be used
              to  remove  any  special  meaning for the next character read and for line continuation.  Options, if
              supplied, have the following meanings:
              -a aname
                     The words are assigned to sequential indices of the  array  variable  aname,  starting  at  0.
                     aname is unset before any new values are assigned.  Other name arguments are ignored.
              -d delim
                     The first character of delim is used to terminate the input line, rather than newline.
              -e     If  the  standard  input  is  coming from a terminal, readline (see READLINE above) is used to
                     obtain the line.  Readline uses the current (or default, if line editing  was  not  previously
                     active) editing settings.
              -i text
                     If  readline  is  being  used  to read the line, text is placed into the editing buffer before
                     editing begins.
              -n nchars
                     read returns after reading nchars characters rather than waiting for a complete line of input,
                     but honor a delimiter if fewer than nchars characters are read before the delimiter.
              -N nchars
                     read  returns  after reading exactly nchars characters rather than waiting for a complete line
                     of input, unless EOF is encountered or read times out.  Delimiter  characters  encountered  in
                     the  input  are  not treated specially and do not cause read to return until nchars characters
                     are read.
              -p prompt
                     Display prompt on standard error, without a trailing newline, before attempting  to  read  any
                     input.  The prompt is displayed only if input is coming from a terminal.
              -r     Backslash  does not act as an escape character.  The backslash is considered to be part of the
                     line.  In particular, a backslash-newline pair may not be used as a line continuation.
              -s     Silent mode.  If input is coming from a terminal, characters are not echoed.
              -t timeout
                     Cause read to time out and return failure if a complete line of input is not read within time‐
                     out  seconds.  timeout may be a decimal number with a fractional portion following the decimal
                     point.  This option is only effective if read is reading input from a terminal, pipe, or other
                     special file; it has no effect when reading from regular files.  If timeout is 0, read returns
                     success if input is available on the specified file descriptor, failure otherwise.   The  exit
                     status is greater than 128 if the timeout is exceeded.
              -u fd  Read input from file descriptor fd.

              If  no names are supplied, the line read is assigned to the variable REPLY.  The return code is zero,
              unless end-of-file is encountered, read times out (in which case the  return  code  is  greater  than
              128), or an invalid file descriptor is supplied as the argument to -u.

       readonly [-aAf] [-p] [name[=word] ...]
              The  given  names  are  marked  readonly;  the values of these names may not be changed by subsequent
              assignment.  If the -f option is supplied, the functions corresponding to the names  are  so  marked.
              The  -a  option  restricts  the variables to indexed arrays; the -A option restricts the variables to
              associative arrays.  If both options are supplied, -A takes precedence.  If  no  name  arguments  are
              given,  or  if the -p option is supplied, a list of all readonly names is printed.  The other options
              may be used to restrict the output to a subset of the set of readonly names.  The  -p  option  causes
              output  to  be  displayed in a format that may be reused as input.  If a variable name is followed by
              =word, the value of the variable is set to word.  The return status is 0 unless an invalid option  is
              encountered,  one of the names is not a valid shell variable name, or -f is supplied with a name that
              is not a function.

       return [n]
              Causes a function to exit with the return value specified by n.  If n is omitted, the  return  status
              is  that  of  the last command executed in the function body.  If used outside a function, but during
              execution of a script by the .  (source) command, it causes the shell to stop executing  that  script
              and  return  either  n  or the exit status of the last command executed within the script as the exit
              status of the script.  If used outside a function and not during execution of  a  script  by  .,  the
              return  status  is  false.   Any command associated with the RETURN trap is executed before execution
              resumes after the function or script.

       set [--abefhkmnptuvxBCEHPT] [-o option-name] [arg ...]
       set [+abefhkmnptuvxBCEHPT] [+o option-name] [arg ...]
              Without options, the name and value of each shell variable are displayed in  a  format  that  can  be
              reused  as input for setting or resetting the currently-set variables.  Read-only variables cannot be
              reset.  In posix mode, only shell variables are listed.  The output is sorted according to  the  cur‐
              rent  locale.  When options are specified, they set or unset shell attributes.  Any arguments remain‐
              ing after option processing are treated as values for the positional parameters and are assigned,  in
              order, to $1, $2, ...  $n.  Options, if specified, have the following meanings:
              -a      Automatically  mark  variables  and functions which are modified or created for export to the
                      environment of subsequent commands.
              -b      Report the status of terminated background jobs immediately, rather than before the next pri‐
                      mary prompt.  This is effective only when job control is enabled.
              -e      Exit  immediately  if  a pipeline (which may consist of a single simple command),  a subshell
                      command enclosed in parentheses, or one of the commands executed as part of  a  command  list
                      enclosed  by  braces  (see SHELL GRAMMAR above) exits with a non-zero status.  The shell does
                      not exit if the command that fails is part of the command list immediately following a  while
                      or  until keyword, part of the test following the if or elif reserved words, part of any com‐
                      mand executed in a && or || list except the command following the final && or ||, any command
                      in  a  pipeline  but  the last, or if the command's return value is being inverted with !.  A
                      trap on ERR, if set, is executed before the shell exits.  This option applies  to  the  shell
                      environment  and  each  subshell  environment  separately  (see COMMAND EXECUTION ENVIRONMENT
                      above), and may cause subshells to exit before executing all the commands in the subshell.
              -f      Disable pathname expansion.
              -h      Remember the location of commands as they are looked up for execution.  This  is  enabled  by
                      default.
              -k      All  arguments  in the form of assignment statements are placed in the environment for a com‐
                      mand, not just those that precede the command name.
              -m      Monitor mode.  Job control is enabled.  This option is on by default for  interactive  shells
                      on  systems  that support it (see JOB CONTROL above).  Background processes run in a separate
                      process group and a line containing their exit status is printed upon their completion.
              -n      Read commands but do not execute them.  This may be used to check a shell script  for  syntax
                      errors.  This is ignored by interactive shells.
              -o option-name
                      The option-name can be one of the following:
                      allexport
                              Same as -a.
                      braceexpand
                              Same as -B.
                      emacs   Use  an  emacs-style command line editing interface.  This is enabled by default when
                              the shell is interactive, unless the shell is started with  the  --noediting  option.
                              This also affects the editing interface used for read -e.
                      errexit Same as -e.
                      errtrace
                              Same as -E.
                      functrace
                              Same as -T.
                      hashall Same as -h.
                      histexpand
                              Same as -H.
                      history Enable  command  history,  as  described  above  under HISTORY.  This option is on by
                              default in interactive shells.
                      ignoreeof
                              The effect is as if the shell command ``IGNOREEOF=10'' had been executed  (see  Shell
                              Variables above).
                      keyword Same as -k.
                      monitor Same as -m.
                      noclobber
                              Same as -C.
                      noexec  Same as -n.
                      noglob  Same as -f.
                      nolog   Currently ignored.
                      notify  Same as -b.
                      nounset Same as -u.
                      onecmd  Same as -t.
                      physical
                              Same as -P.
                      pipefail
                              If  set,  the return value of a pipeline is the value of the last (rightmost) command
                              to exit with a non-zero status, or zero if all commands in the pipeline exit success‐
                              fully.  This option is disabled by default.
                      posix   Change  the behavior of bash where the default operation differs from the POSIX stan‐
                              dard to match the standard (posix mode).
                      privileged
                              Same as -p.
                      verbose Same as -v.
                      vi      Use a vi-style command line editing interface.  This also affects the editing  inter‐
                              face used for read -e.
                      xtrace  Same as -x.
                      If  -o is supplied with no option-name, the values of the current options are printed.  If +o
                      is supplied with no option-name, a series of set commands to recreate the current option set‐
                      tings is displayed on the standard output.
              -p      Turn on privileged mode.  In this mode, the $ENV and $BASH_ENV files are not processed, shell
                      functions are not inherited from the environment, and the SHELLOPTS,  BASHOPTS,  CDPATH,  and
                      GLOBIGNORE  variables,  if  they  appear  in  the  environment, are ignored.  If the shell is
                      started with the effective user (group) id not equal to the real user (group) id, and the  -p
                      option  is not supplied, these actions are taken and the effective user id is set to the real
                      user id.  If the -p option is supplied at startup, the effective user id is not reset.  Turn‐
                      ing  this  option  off causes the effective user and group ids to be set to the real user and
                      group ids.
              -t      Exit after reading and executing one command.
              -u      Treat unset variables and parameters other than the special parameters  "@"  and  "*"  as  an
                      error when performing parameter expansion.  If expansion is attempted on an unset variable or
                      parameter, the shell prints an error message, and, if not interactive, exits with a  non-zero
                      status.
              -v      Print shell input lines as they are read.
              -x      After expanding each simple command, for command, case command, select command, or arithmetic
                      for command, display the expanded value of PS4, followed by  the  command  and  its  expanded
                      arguments or associated word list.
              -B      The shell performs brace expansion (see Brace Expansion above).  This is on by default.
              -C      If  set,  bash  does not overwrite an existing file with the >, >&, and <> redirection opera‐
                      tors.  This may be overridden when creating output files by using the redirection operator >|
                      instead of >.
              -E      If  set, any trap on ERR is inherited by shell functions, command substitutions, and commands
                      executed in a subshell environment.  The ERR trap is normally not inherited in such cases.
              -H      Enable !  style history substitution.  This option is on by default when the shell is  inter‐
                      active.
              -P      If  set,  the  shell  does  not follow symbolic links when executing commands such as cd that
                      change the current working directory.  It uses the physical directory structure instead.   By
                      default,  bash follows the logical chain of directories when performing commands which change
                      the current directory.
              -T      If set, any traps on DEBUG and RETURN are inherited by  shell  functions,  command  substitu‐
                      tions,  and commands executed in a subshell environment.  The DEBUG and RETURN traps are nor‐
                      mally not inherited in such cases.
              --      If no arguments follow this option, then the positional parameters are unset.  Otherwise, the
                      positional parameters are set to the args, even if some of them begin with a -.
              -       Signal  the end of options, cause all remaining args to be assigned to the positional parame‐
                      ters.  The -x and -v options are turned off.  If there are no args, the positional parameters
                      remain unchanged.

              The options are off by default unless otherwise noted.  Using + rather than - causes these options to
              be turned off.  The options can also be specified as arguments to an invocation of  the  shell.   The
              current set of options may be found in $-.  The return status is always true unless an invalid option
              is encountered.

       shift [n]
              The positional parameters from n+1 ... are renamed to $1 ....  Parameters represented by the  numbers
              $#  down  to $#-n+1 are unset.  n must be a non-negative number less than or equal to $#.  If n is 0,
              no parameters are changed.  If n is not given, it is assumed to be 1.  If n is greater than  $#,  the
              positional  parameters  are not changed.  The return status is greater than zero if n is greater than
              $# or less than zero; otherwise 0.

       shopt [-pqsu] [-o] [optname ...]
              Toggle the values of variables controlling optional shell behavior.  With no options, or with the  -p
              option,  a  list  of  all settable options is displayed, with an indication of whether or not each is
              set.  The -p option causes output to be displayed in a form that  may  be  reused  as  input.   Other
              options have the following meanings:
              -s     Enable (set) each optname.
              -u     Disable (unset) each optname.
              -q     Suppresses  normal output (quiet mode); the return status indicates whether the optname is set
                     or unset.  If multiple optname arguments are given with -q, the return status is zero  if  all
                     optnames are enabled; non-zero otherwise.
              -o     Restricts the values of optname to be those defined for the -o option to the set builtin.

              If  either  -s or -u is used with no optname arguments, the display is limited to those options which
              are set or unset, respectively.  Unless otherwise noted, the shopt options are  disabled  (unset)  by
              default.

              The return status when listing options is zero if all optnames are enabled, non-zero otherwise.  When
              setting or unsetting options, the return status is zero unless  an  optname  is  not  a  valid  shell
              option.

              The list of shopt options is:

              autocd  If set, a command name that is the name of a directory is executed as if it were the argument
                      to the cd command.  This option is only used by interactive shells.
              cdable_vars
                      If set, an argument to the cd builtin command that is not a directory is assumed  to  be  the
                      name of a variable whose value is the directory to change to.
              cdspell If  set,  minor  errors in the spelling of a directory component in a cd command will be cor‐
                      rected.  The errors checked for are transposed characters, a missing character, and one char‐
                      acter  too  many.  If a correction is found, the corrected file name is printed, and the com‐
                      mand proceeds.  This option is only used by interactive shells.
              checkhash
                      If set, bash checks that a command found in the hash table exists before  trying  to  execute
                      it.  If a hashed command no longer exists, a normal path search is performed.
              checkjobs
                      If  set,  bash lists the status of any stopped and running jobs before exiting an interactive
                      shell.  If any jobs are running, this causes the exit to be deferred until a second  exit  is
                      attempted without an intervening command (see JOB CONTROL above).  The shell always postpones
                      exiting if any jobs are stopped.
              checkwinsize
                      If set, bash checks the window size after each command and, if necessary, updates the  values
                      of LINES and COLUMNS.
              cmdhist If set, bash attempts to save all lines of a multiple-line command in the same history entry.
                      This allows easy re-editing of multi-line commands.
              compat31
                      If set, bash changes its behavior to that of version 3.1 with respect to quoted arguments  to
                      the [[ conditional command's =~ operator.
              compat32
                      If  set,  bash  changes  its  behavior to that of version 3.2 with respect to locale-specific
                      string comparison when using the [[ conditional command's < and > operators.   Bash  versions
                      prior  to  bash-4.1  use  ASCII  collation  and strcmp(3); bash-4.1 and later use the current
                      locale's collation sequence and strcoll(3).
              compat40
                      If set, bash changes its behavior to that of version  4.0  with  respect  to  locale-specific
                      string  comparison  when  using  the [[ conditional command's < and > operators (see previous
                      item) and the effect of interrupting a command list.
              compat41
                      If set, bash, when in posix mode, treats a single quote in a double-quoted  parameter  expan‐
                      sion  as  a special character.  The single quotes must match (an even number) and the charac‐
                      ters between the single quotes are considered quoted.  This is the  behavior  of  posix  mode
                      through version 4.1.  The default bash behavior remains as in previous versions.
              direxpand
                      If  set,  bash  replaces  directory  names with the results of word expansion when performing
                      filename completion.  This changes the contents of the readline editing buffer.  If not  set,
                      bash attempts to preserve what the user typed.
              dirspell
                      If  set,  bash  attempts spelling correction on directory names during word completion if the
                      directory name initially supplied does not exist.
              dotglob If set, bash includes filenames beginning with a `.' in the results of pathname expansion.
              execfail
                      If set, a non-interactive shell will not exit if it cannot execute the file specified  as  an
                      argument to the exec builtin command.  An interactive shell does not exit if exec fails.
              expand_aliases
                      If  set,  aliases  are  expanded as described above under ALIASES.  This option is enabled by
                      default for interactive shells.
              extdebug
                      If set, behavior intended for use by debuggers is enabled:
                      1.     The -F option to the declare builtin displays the source file  name  and  line  number
                             corresponding to each function name supplied as an argument.
                      2.     If  the  command  run  by the DEBUG trap returns a non-zero value, the next command is
                             skipped and not executed.
                      3.     If the command run by the DEBUG trap returns a value of 2, and the shell is  executing
                             in  a  subroutine  (a  shell  function  or  a shell script executed by the . or source
                             builtins), a call to return is simulated.
                      4.     BASH_ARGC and BASH_ARGV are updated as described in their descriptions above.
                      5.     Function tracing is enabled:  command substitution,  shell  functions,  and  subshells
                             invoked with ( command ) inherit the DEBUG and RETURN traps.
                      6.     Error  tracing  is  enabled:   command  substitution,  shell  functions, and subshells
                             invoked with ( command ) inherit the ERR trap.
              extglob If set, the extended pattern matching features described above under Pathname  Expansion  are
                      enabled.
              extquote
                      If  set, $'string' and $"string" quoting is performed within ${parameter} expansions enclosed
                      in double quotes.  This option is enabled by default.
              failglob
                      If set, patterns which fail to match filenames during pathname expansion result in an  expan‐
                      sion error.
              force_fignore
                      If  set,  the suffixes specified by the FIGNORE shell variable cause words to be ignored when
                      performing word completion even if the ignored words are the only possible completions.   See
                      SHELL VARIABLES above for a description of FIGNORE.  This option is enabled by default.
              globstar
                      If  set, the pattern ** used in a pathname expansion context will match all files and zero or
                      more directories and subdirectories.  If the pattern is followed by a /, only directories and
                      subdirectories match.
              gnu_errfmt
                      If set, shell error messages are written in the standard GNU error message format.
              histappend
                      If  set, the history list is appended to the file named by the value of the HISTFILE variable
                      when the shell exits, rather than overwriting the file.
              histreedit
                      If set, and readline is being used, a user is given the opportunity to re-edit a failed  his‐
                      tory substitution.
              histverify
                      If  set,  and readline is being used, the results of history substitution are not immediately
                      passed to the shell parser.  Instead, the resulting line is loaded into the readline  editing
                      buffer, allowing further modification.
              hostcomplete
                      If  set,  and readline is being used, bash will attempt to perform hostname completion when a
                      word containing a @ is being completed  (see  Completing  under  READLINE  above).   This  is
                      enabled by default.
              huponexit
                      If set, bash will send SIGHUP to all jobs when an interactive login shell exits.
              interactive_comments
                      If set, allow a word beginning with # to cause that word and all remaining characters on that
                      line to be ignored in an interactive shell (see COMMENTS above).  This option is  enabled  by
                      default.
              lastpipe
                      If set, and job control is not active, the shell runs the last command of a pipeline not exe‐
                      cuted in the background in the current shell environment.
              lithist If set, and the cmdhist option is enabled, multi-line commands are saved to the history  with
                      embedded newlines rather than using semicolon separators where possible.
              login_shell
                      The  shell  sets  this  option if it is started as a login shell (see INVOCATION above).  The
                      value may not be changed.
              mailwarn
                      If set, and a file that bash is checking for mail has been accessed since the  last  time  it
                      was checked, the message ``The mail in mailfile has been read'' is displayed.
              no_empty_cmd_completion
                      If  set,  and  readline  is being used, bash will not attempt to search the PATH for possible
                      completions when completion is attempted on an empty line.
              nocaseglob
                      If set, bash matches filenames in a case-insensitive fashion when performing pathname  expan‐
                      sion (see Pathname Expansion above).
              nocasematch
                      If  set,  bash  matches patterns in a case-insensitive fashion when performing matching while
                      executing case or [[ conditional commands.
              nullglob
                      If set, bash allows patterns which match no files (see Pathname Expansion above) to expand to
                      a null string, rather than themselves.
              progcomp
                      If  set,  the  programmable  completion  facilities  (see  Programmable Completion above) are
                      enabled.  This option is enabled by default.
              promptvars
                      If set, prompt strings undergo parameter expansion, command substitution,  arithmetic  expan‐
                      sion, and quote removal after being expanded as described in PROMPTING above.  This option is
                      enabled by default.
              restricted_shell
                      The shell sets this option if it is started in restricted mode (see RESTRICTED SHELL  below).
                      The  value may not be changed.  This is not reset when the startup files are executed, allow‐
                      ing the startup files to discover whether or not a shell is restricted.
              shift_verbose
                      If set, the shift builtin prints an error message when the shift count exceeds the number  of
                      positional parameters.
              sourcepath
                      If  set,  the  source (.) builtin uses the value of PATH to find the directory containing the
                      file supplied as an argument.  This option is enabled by default.
              syslog_history
                      If set, command history is logged to syslog.
              xpg_echo
                      If set, the echo builtin expands backslash-escape sequences by default.

       suspend [-f]
              Suspend the execution of this shell until it receives a SIGCONT signal. When the suspended shell is a
              background process, it can be restarted by the fg command. For more information, read the JOB CONTROL
              section. The suspend command can not suspend the login shell. However, when -f option  is  specified,
              suspend  command  can  suspend  even login shell.  The return status is 0 unless the shell is a login
              shell and -f is not supplied, or if job control is not enabled.

       test expr
       [ expr ]
              Return a status of 0 or 1 depending on the evaluation of the conditional expression expr.  Each oper‐
              ator  and  operand  must be a separate argument.  Expressions are composed of the primaries described
              above under CONDITIONAL EXPRESSIONS.  test does not accept any options, nor does it accept and ignore
              an argument of -- as signifying the end of options.

              Expressions  may be combined using the following operators, listed in decreasing order of precedence.
              The evaluation depends on the number of arguments; see below.  Operator precedence is used when there
              are five or more arguments.
              ! expr True if expr is false.
              ( expr )
                     Returns the value of expr.  This may be used to override the normal precedence of operators.
              expr1 -a expr2
                     True if both expr1 and expr2 are true.
              expr1 -o expr2
                     True if either expr1 or expr2 is true.

              test and [ evaluate conditional expressions using a set of rules based on the number of arguments.

              0 arguments
                     The expression is false.
              1 argument
                     The expression is true if and only if the argument is not null.
              2 arguments
                     If the first argument is !, the expression is true if and only if the second argument is null.
                     If the first argument is one of the unary conditional operators listed above under CONDITIONAL
                     EXPRESSIONS, the expression is true if the unary test is true.  If the first argument is not a
                     valid unary conditional operator, the expression is false.
              3 arguments
                     The following conditions are applied in the order listed.  If the second argument  is  one  of
                     the binary conditional operators listed above under CONDITIONAL EXPRESSIONS, the result of the
                     expression is the result of the binary test using the first and third arguments  as  operands.
                     The  -a  and  -o operators are considered binary operators when there are three arguments.  If
                     the first argument is !, the value is the negation of the two-argument test using  the  second
                     and  third arguments.  If the first argument is exactly ( and the third argument is exactly ),
                     the result is the one-argument test of the second  argument.   Otherwise,  the  expression  is
                     false.
              4 arguments
                     If  the  first argument is !, the result is the negation of the three-argument expression com‐
                     posed of the remaining arguments.  Otherwise, the expression is parsed and evaluated according
                     to precedence using the rules listed above.
              5 or more arguments
                     The expression is parsed and evaluated according to precedence using the rules listed above.

              When used with test or [, the < and > operators sort lexicographically using ASCII ordering.

       times  Print  the accumulated user and system times for the shell and for processes run from the shell.  The
              return status is 0.

       trap [-lp] [[arg] sigspec ...]
              The command arg is to be read and executed when the shell receives  signal(s)  sigspec.   If  arg  is
              absent  (and there is a single sigspec) or -, each specified signal is reset to its original disposi‐
              tion (the value it had upon entrance to the shell).  If arg is the null string the  signal  specified
              by each sigspec is ignored by the shell and by the commands it invokes.  If arg is not present and -p
              has been supplied, then the trap commands associated with each sigspec are displayed.   If  no  argu‐
              ments are supplied or if only -p is given, trap prints the list of commands associated with each sig‐
              nal.  The -l option causes the shell to print a list of signal names and their corresponding numbers.
              Each  sigspec  is  either  a signal name defined in <signal.h>, or a signal number.  Signal names are
              case insensitive and the SIG prefix is optional.

              If a sigspec is EXIT (0) the command arg is executed on exit from the shell.  If a sigspec is  DEBUG,
              the  command  arg is executed before every simple command, for command, case command, select command,
              every arithmetic for command, and before the first command executes in a shell  function  (see  SHELL
              GRAMMAR  above).  Refer to the description of the extdebug option to the shopt builtin for details of
              its effect on the DEBUG trap.  If a sigspec is RETURN, the command arg is executed each time a  shell
              function or a script executed with the . or source builtins finishes executing.

              If  a  sigspec is ERR, the command arg is executed whenever a simple command has a non-zero exit sta‐
              tus, subject to the following conditions.  The ERR trap is not executed if the failed command is part
              of  the command list immediately following a while or until keyword, part of the test in an if state‐
              ment, part of a command executed in a && or || list, or  if  the  command's  return  value  is  being
              inverted via !.  These are the same conditions obeyed by the errexit option.

              Signals ignored upon entry to the shell cannot be trapped, reset or listed.  Trapped signals that are
              not being ignored are reset to their original values in a subshell or subshell environment  when  one
              is created.  The return status is false if any sigspec is invalid; otherwise trap returns true.

       type [-aftpP] name [name ...]
              With  no  options,  indicate how each name would be interpreted if used as a command name.  If the -t
              option is used, type prints a string which is one of alias, keyword, function, builtin,  or  file  if
              name is an alias, shell reserved word, function, builtin, or disk file, respectively.  If the name is
              not found, then nothing is printed, and an exit status of false is returned.  If  the  -p  option  is
              used,  type either returns the name of the disk file that would be executed if name were specified as
              a command name, or nothing if ``type -t name'' would not return file.  The -P option  forces  a  PATH
              search for each name, even if ``type -t name'' would not return file.  If a command is hashed, -p and
              -P print the hashed value, not necessarily the file that appears first in PATH.  If the -a option  is
              used, type prints all of the places that contain an executable named name.  This includes aliases and
              functions, if and only if the -p option is not also used.  The table of hashed commands is  not  con‐
              sulted  when  using -a.  The -f option suppresses shell function lookup, as with the command builtin.
              type returns true if all of the arguments are found, false if any are not found.

       ulimit [-HSTabcdefilmnpqrstuvx [limit]]
              Provides control over the resources available to the shell and to processes started by it, on systems
              that  allow  such  control.  The -H and -S options specify that the hard or soft limit is set for the
              given resource.  A hard limit cannot be increased by a non-root user once it is set; a soft limit may
              be increased up to the value of the hard limit.  If neither -H nor -S is specified, both the soft and
              hard limits are set.  The value of limit can be a number in the unit specified for  the  resource  or
              one  of the special values hard, soft, or unlimited, which stand for the current hard limit, the cur‐
              rent soft limit, and no limit, respectively.  If limit is omitted, the  current  value  of  the  soft
              limit  of  the  resource  is  printed, unless the -H option is given.  When more than one resource is
              specified, the limit name and unit are printed before the value.  Other options  are  interpreted  as
              follows:
              -a     All current limits are reported
              -b     The maximum socket buffer size
              -c     The maximum size of core files created
              -d     The maximum size of a process's data segment
              -e     The maximum scheduling priority ("nice")
              -f     The maximum size of files written by the shell and its children
              -i     The maximum number of pending signals
              -l     The maximum size that may be locked into memory
              -m     The maximum resident set size (many systems do not honor this limit)
              -n     The maximum number of open file descriptors (most systems do not allow this value to be set)
              -p     The pipe size in 512-byte blocks (this may not be set)
              -q     The maximum number of bytes in POSIX message queues
              -r     The maximum real-time scheduling priority
              -s     The maximum stack size
              -t     The maximum amount of cpu time in seconds
              -u     The maximum number of processes available to a single user
              -v     The maximum amount of virtual memory available to the shell and, on some systems, to its chil‐
                     dren
              -x     The maximum number of file locks
              -T     The maximum number of threads

              If limit is given, it is the new value of the specified resource (the -a option is display only).  If
              no  option is given, then -f is assumed.  Values are in 1024-byte increments, except for -t, which is
              in seconds, -p, which is in units of 512-byte blocks, and -T, -b, -n, and -u, which are unscaled val‐
              ues.   The  return  status  is 0 unless an invalid option or argument is supplied, or an error occurs
              while setting a new limit.  In POSIX Mode 512-byte blocks are used for the `-c' and `-f' options.

       umask [-p] [-S] [mode]
              The user file-creation mask is set to mode.  If mode begins with a digit, it  is  interpreted  as  an
              octal  number;  otherwise  it  is  interpreted  as  a  symbolic mode mask similar to that accepted by
              chmod(1).  If mode is omitted, the current value of the mask is printed.  The -S  option  causes  the
              mask to be printed in symbolic form; the default output is an octal number.  If the -p option is sup‐
              plied, and mode is omitted, the output is in a form that may be reused as input.  The  return  status
              is 0 if the mode was successfully changed or if no mode argument was supplied, and false otherwise.

       unalias [-a] [name ...]
              Remove  each  name  from  the  list of defined aliases.  If -a is supplied, all alias definitions are
              removed.  The return value is true unless a supplied name is not a defined alias.

       unset [-fv] [name ...]
              For each name, remove the corresponding variable or function.  If no options are supplied, or the  -v
              option  is given, each name refers to a shell variable.  Read-only variables may not be unset.  If -f
              is specified, each name refers to a shell function, and the function  definition  is  removed.   Each
              unset  variable or function is removed from the environment passed to subsequent commands.  If any of
              COMP_WORDBREAKS, RANDOM, SECONDS, LINENO, HISTCMD, FUNCNAME, GROUPS, or DIRSTACK are unset, they lose
              their special properties, even if they are subsequently reset.  The exit status is true unless a name
              is readonly.

       wait [n ...]
              Wait for each specified process and return its termination status.  Each n may be a process ID  or  a
              job specification; if a job spec is given, all processes in that job's pipeline are waited for.  If n
              is not given, all currently active child processes are waited for, and the return status is zero.  If
              n specifies a non-existent process or job, the return status is 127.  Otherwise, the return status is
              the exit status of the last process or job waited for.

SEE ALSO
       bash(1), sh(1)



GNU Bash-4.0                                        2004 Apr 20                                    BASH_BUILTINS(1)
CAT(1)                                             User Commands                                             CAT(1)



NAME
       cat - concatenate files and print on the standard output

SYNOPSIS
       cat [OPTION]... [FILE]...

DESCRIPTION
       Concatenate FILE(s), or standard input, to standard output.

       -A, --show-all
              equivalent to -vET

       -b, --number-nonblank
              number nonempty output lines, overrides -n

       -e     equivalent to -vE

       -E, --show-ends
              display $ at end of each line

       -n, --number
              number all output lines

       -s, --squeeze-blank
              suppress repeated empty output lines

       -t     equivalent to -vT

       -T, --show-tabs
              display TAB characters as ^I

       -u     (ignored)

       -v, --show-nonprinting
              use ^ and M- notation, except for LFD and TAB

       --help display this help and exit

       --version
              output version information and exit

       With no FILE, or when FILE is -, read standard input.

EXAMPLES
       cat f - g
              Output f's contents, then standard input, then g's contents.

       cat    Copy standard input to standard output.

       GNU   coreutils  online  help:  <http://www.gnu.org/software/coreutils/>  Report  cat  translation  bugs  to
       <http://translationproject.org/team/>

AUTHOR
       Written by Torbjorn Granlund and Richard M. Stallman.

COPYRIGHT
       Copyright  ©  2013  Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version   3   or   later
       <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent per‐
       mitted by law.

SEE ALSO
       tac(1)

       The full documentation for cat is maintained as a Texinfo manual.  If the info and cat programs are properly
       installed at your site, the command

              info coreutils 'cat invocation'

       should give you access to the complete manual.



GNU coreutils 8.22                                 November 2020                                             CAT(1)
GREP(1)                                       General Commands Manual                                       GREP(1)



NAME
       grep, egrep, fgrep - print lines matching a pattern

SYNOPSIS
       grep [OPTIONS] PATTERN [FILE...]
       grep [OPTIONS] [-e PATTERN | -f FILE] [FILE...]

DESCRIPTION
       grep  searches  the  named input FILEs (or standard input if no files are named, or if a single hyphen-minus
       (-) is given as file name) for lines containing a match to the given PATTERN.  By default, grep  prints  the
       matching lines.

       In  addition,  two  variant programs egrep and fgrep are available.  egrep is the same as grep -E.  fgrep is
       the same as grep -F.  Direct invocation as either egrep or fgrep is deprecated, but  is  provided  to  allow
       historical applications that rely on them to run unmodified.

OPTIONS
   Generic Program Information
       --help Print  a  usage message briefly summarizing these command-line options and the bug-reporting address,
              then exit.

       -V, --version
              Print the version number of grep to the standard  output  stream.   This  version  number  should  be
              included in all bug reports (see below).

   Matcher Selection
       -E, --extended-regexp
              Interpret PATTERN as an extended regular expression (ERE, see below).  (-E is specified by POSIX.)

       -F, --fixed-strings, --fixed-regexp
              Interpret  PATTERN  as a list of fixed strings, separated by newlines, any of which is to be matched.
              (-F is specified by POSIX, --fixed-regexp is an  obsoleted  alias,  please  do  not  use  it  in  new
              scripts.)

       -G, --basic-regexp
              Interpret PATTERN as a basic regular expression (BRE, see below).  This is the default.

       -P, --perl-regexp
              Interpret  PATTERN as a Perl regular expression.  This is highly experimental and grep -P may warn of
              unimplemented features.

   Matching Control
       -e PATTERN, --regexp=PATTERN
              Use PATTERN as the pattern.  This can be used to specify multiple search patterns, or  to  protect  a
              pattern beginning with a hyphen (-).  (-e is specified by POSIX.)

       -f FILE, --file=FILE
              Obtain  patterns  from  FILE,  one  per  line.   The empty file contains zero patterns, and therefore
              matches nothing.  (-f is specified by POSIX.)

       -i, --ignore-case
              Ignore case distinctions in both the PATTERN and the input files.  (-i is specified by POSIX.)

       -v, --invert-match
              Invert the sense of matching, to select non-matching lines.  (-v is specified by POSIX.)

       -w, --word-regexp
              Select only those lines containing matches that form whole words.  The  test  is  that  the  matching
              substring  must  either  be  at  the  beginning  of  the  line, or preceded by a non-word constituent
              character.  Similarly, it must be either at the end of the line or followed by a non-word constituent
              character.  Word-constituent characters are letters, digits, and the underscore.

       -x, --line-regexp
              Select only those matches that exactly match the whole line.  (-x is specified by POSIX.)

       -y     Obsolete synonym for -i.

   General Output Control
       -c, --count
              Suppress  normal  output;  instead print a count of matching lines for each input file.  With the -v,
              --invert-match option (see below), count non-matching lines.  (-c is specified by POSIX.)

       --color[=WHEN], --colour[=WHEN]
              Surround the matched (non-empty) strings, matching lines, context lines, file  names,  line  numbers,
              byte  offsets,  and  separators  (for  fields  and  groups of context lines) with escape sequences to
              display them in color  on  the  terminal.   The  colors  are  defined  by  the  environment  variable
              GREP_COLORS.  The deprecated environment variable GREP_COLOR is still supported, but its setting does
              not have priority.  WHEN is never, always, or auto.

       -L, --files-without-match
              Suppress normal output; instead print the name of each input file from which no output would normally
              have been printed.  The scanning will stop on the first match.

       -l, --files-with-matches
              Suppress  normal  output;  instead print the name of each input file from which output would normally
              have been printed.  The scanning will stop on the first match.  (-l is specified by POSIX.)

       -m NUM, --max-count=NUM
              Stop reading a file after NUM matching lines.  If the input is standard input from  a  regular  file,
              and  NUM  matching lines are output, grep ensures that the standard input is positioned to just after
              the last matching line before exiting, regardless of the presence of trailing  context  lines.   This
              enables  a  calling process to resume a search.  When grep stops after NUM matching lines, it outputs
              any trailing context lines.  When the -c or --count option is also used, grep does not output a count
              greater than NUM.  When the -v or --invert-match option is also used, grep stops after outputting NUM
              non-matching lines.

       -o, --only-matching
              Print only the matched (non-empty) parts of a matching line, with each such part on a separate output
              line.

       -q, --quiet, --silent
              Quiet;  do  not write anything to standard output.  Exit immediately with zero status if any match is
              found, even if an error was detected.  Also see the -s or --no-messages option.  (-q is specified  by
              POSIX.)

       -s, --no-messages
              Suppress  error  messages  about nonexistent or unreadable files.  Portability note: unlike GNU grep,
              7th Edition Unix grep did not conform to POSIX, because it lacked -q and its -s option  behaved  like
              GNU  grep's  -q  option.   USG-style  grep  also  lacked  -q but its -s option behaved like GNU grep.
              Portable shell scripts should avoid both -q and -s and should redirect standard and error  output  to
              /dev/null instead.  (-s is specified by POSIX.)

   Output Line Prefix Control
       -b, --byte-offset
              Print  the  0-based  byte  offset  within  the  input  file  before  each  line  of  output.   If  -o
              (--only-matching) is specified, print the offset of the matching part itself.

       -H, --with-filename
              Print the file name for each match.  This is the default when there is more than one file to search.

       -h, --no-filename
              Suppress the prefixing of file names on output.  This is the default when there is only one file  (or
              only standard input) to search.

       --label=LABEL
              Display  input  actually  coming  from  standard  input  as  input  coming  from file LABEL.  This is
              especially useful when implementing tools like zgrep, e.g., gzip -cd foo.gz  |  grep  --label=foo  -H
              something.  See also the -H option.

       -n, --line-number
              Prefix  each  line of output with the 1-based line number within its input file.  (-n is specified by
              POSIX.)

       -T, --initial-tab
              Make sure that the first character of actual line content lies on a tab stop, so that  the  alignment
              of  tabs  looks  normal.  This is useful with options that prefix their output to the actual content:
              -H,-n, and -b.  In order to improve the probability that lines from a single file will all  start  at
              the  same  column,  this  also causes the line number and byte offset (if present) to be printed in a
              minimum size field width.

       -u, --unix-byte-offsets
              Report Unix-style byte offsets.  This switch causes grep to report byte offsets as if the file were a
              Unix-style  text file, i.e., with CR characters stripped off.  This will produce results identical to
              running grep on a Unix machine.  This option has no effect unless -b option is also used; it  has  no
              effect on platforms other than MS-DOS and MS-Windows.

       -Z, --null
              Output  a  zero  byte (the ASCII NUL character) instead of the character that normally follows a file
              name.  For example, grep -lZ outputs a zero byte after each file name instead of the  usual  newline.
              This  option  makes  the  output  unambiguous,  even in the presence of file names containing unusual
              characters like newlines.  This option can be used with commands like find -print0, perl -0, sort -z,
              and xargs -0 to process arbitrary file names, even those that contain newline characters.

   Context Line Control
       -A NUM, --after-context=NUM
              Print NUM lines of trailing context after matching lines.  Places a line containing a group separator
              (described  under  --group-separator)  between  contiguous  groups  of  matches.   With  the  -o   or
              --only-matching option, this has no effect and a warning is given.

       -B NUM, --before-context=NUM
              Print NUM lines of leading context before matching lines.  Places a line containing a group separator
              (described  under  --group-separator)  between  contiguous  groups  of  matches.   With  the  -o   or
              --only-matching option, this has no effect and a warning is given.

       -C NUM, -NUM, --context=NUM
              Print  NUM  lines  of  output  context.   Places a line containing a group separator (described under
              --group-separator) between contiguous groups of matches.  With the -o or --only-matching option, this
              has no effect and a warning is given.

       --group-separator=SEP
              Use SEP as a group separator. By default SEP is double hyphen (--).

       --no-group-separator
              Use empty string as a group separator.

   File and Directory Selection
       -a, --text
              Process a binary file as if it were text; this is equivalent to the --binary-files=text option.

       --binary-files=TYPE
              If the first few bytes of a file indicate that the file contains binary data, assume that the file is
              of type TYPE.  By default, TYPE is binary, and grep normally outputs either a one-line message saying
              that  a  binary  file  matches,  or  no message if there is no match.  If TYPE is without-match, grep
              assumes that a binary file does not match; this is equivalent to the -I option.   If  TYPE  is  text,
              grep  processes a binary file as if it were text; this is equivalent to the -a option.  Warning: grep
              --binary-files=text might output binary garbage, which can have nasty side effects if the output is a
              terminal and if the terminal driver interprets some of it as commands.

       -D ACTION, --devices=ACTION
              If  an input file is a device, FIFO or socket, use ACTION to process it.  By default, ACTION is read,
              which means that devices are read just as if they were ordinary files.  If ACTION  is  skip,  devices
              are silently skipped.

       -d ACTION, --directories=ACTION
              If  an  input  file is a directory, use ACTION to process it.  By default, ACTION is read, i.e., read
              directories just as if they were ordinary files.  If ACTION is skip, silently skip  directories.   If
              ACTION is recurse, read all files under each directory, recursively, following symbolic links only if
              they are on the command line.  This is equivalent to the -r option.

       --exclude=GLOB
              Skip files whose base name matches GLOB (using wildcard matching).  A file-name glob can  use  *,  ?,
              and [...]  as wildcards, and \ to quote a wildcard or backslash character literally.

       --exclude-from=FILE
              Skip files whose base name matches any of the file-name globs read from FILE (using wildcard matching
              as described under --exclude).

       --exclude-dir=DIR
              Exclude directories matching the pattern DIR from recursive searches.

       -I     Process a binary  file  as  if  it  did  not  contain  matching  data;  this  is  equivalent  to  the
              --binary-files=without-match option.

       --include=GLOB
              Search  only  files  whose  base  name  matches  GLOB  (using  wildcard  matching  as described under
              --exclude).

       -r, --recursive
              Read all files under each directory, recursively, following symbolic links only if they  are  on  the
              command line.  This is equivalent to the -d recurse option.

       -R, --dereference-recursive
              Read all files under each directory, recursively.  Follow all symbolic links, unlike -r.

   Other Options
       --line-buffered
              Use line buffering on output.  This can cause a performance penalty.

       -U, --binary
              Treat  the file(s) as binary.  By default, under MS-DOS and MS-Windows, grep guesses the file type by
              looking at the contents of the first 32KB read from the file.  If grep decides the  file  is  a  text
              file, it strips the CR characters from the original file contents (to make regular expressions with ^
              and $ work correctly).  Specifying -U overrules this guesswork, causing all  files  to  be  read  and
              passed  to the matching mechanism verbatim; if the file is a text file with CR/LF pairs at the end of
              each line, this will cause some regular expressions to fail.  This option has no effect on  platforms
              other than MS-DOS and MS-Windows.

       -z, --null-data
              Treat  the  input as a set of lines, each terminated by a zero byte (the ASCII NUL character) instead
              of a newline.  Like the -Z or --null option, this option can be used with commands like  sort  -z  to
              process arbitrary file names.

REGULAR EXPRESSIONS
       A  regular  expression  is  a  pattern that describes a set of strings.  Regular expressions are constructed
       analogously to arithmetic expressions, by using various operators to combine smaller expressions.

       grep understands three different versions of regular expression syntax: “basic,” “extended” and  “perl.”  In
       GNU grep,  there  is no difference in available functionality between basic and extended syntaxes.  In other
       implementations, basic regular expressions are less powerful.  The following description applies to extended
       regular  expressions;  differences  for  basic  regular expressions are summarized afterwards.  Perl regular
       expressions give additional functionality, and are documented in pcresyntax(3) and pcrepattern(3),  but  may
       not be available on every system.

       The fundamental building blocks are the regular expressions that match a single character.  Most characters,
       including all letters and digits, are regular expressions that match themselves.   Any  meta-character  with
       special meaning may be quoted by preceding it with a backslash.

       The period . matches any single character.

   Character Classes and Bracket Expressions
       A  bracket  expression is a list of characters enclosed by [ and ].  It matches any single character in that
       list; if the first character of the list is the caret ^ then it matches any character not in the list.   For
       example, the regular expression [0123456789] matches any single digit.

       Within  a  bracket  expression,  a  range  expression  consists of two characters separated by a hyphen.  It
       matches any single character that sorts between the two characters, inclusive, using the locale's  collating
       sequence  and  character  set.   For  example, in the default C locale, [a-d] is equivalent to [abcd].  Many
       locales sort characters in dictionary order, and in these locales  [a-d]  is  typically  not  equivalent  to
       [abcd];  it  might  be  equivalent  to  [aBbCcDd], for example.  To obtain the traditional interpretation of
       bracket expressions, you can use the C locale by setting the LC_ALL environment variable to the value C.

       Finally, certain named classes of characters are predefined within bracket expressions, as  follows.   Their
       names  are  self explanatory, and they are [:alnum:], [:alpha:], [:cntrl:], [:digit:], [:graph:], [:lower:],
       [:print:], [:punct:], [:space:], [:upper:], and [:xdigit:].  For example, [[:alnum:]]  means  the  character
       class  of  numbers and letters in the current locale. In the C locale and ASCII character set encoding, this
       is the same as [0-9A-Za-z].  (Note that the brackets in these class names are part of  the  symbolic  names,
       and  must  be included in addition to the brackets delimiting the bracket expression.)  Most meta-characters
       lose their special meaning inside bracket expressions.  To include a literal ] place it first in  the  list.
       Similarly,  to  include  a  literal ^ place it anywhere but first.  Finally, to include a literal - place it
       last.

   Anchoring
       The caret ^ and the dollar sign $ are meta-characters that  respectively  match  the  empty  string  at  the
       beginning and end of a line.

   The Backslash Character and Special Expressions
       The symbols \< and \> respectively match the empty string at the beginning and end of a word.  The symbol \b
       matches the empty string at the edge of a word, and \B matches the empty string provided  it's  not  at  the
       edge of a word.  The symbol \w is a synonym for [_[:alnum:]] and \W is a synonym for [^_[:alnum:]].

   Repetition
       A regular expression may be followed by one of several repetition operators:
       ?      The preceding item is optional and matched at most once.
       *      The preceding item will be matched zero or more times.
       +      The preceding item will be matched one or more times.
       {n}    The preceding item is matched exactly n times.
       {n,}   The preceding item is matched n or more times.
       {,m}   The preceding item is matched at most m times.  This is a GNU extension.
       {n,m}  The preceding item is matched at least n times, but not more than m times.

   Concatenation
       Two  regular  expressions may be concatenated; the resulting regular expression matches any string formed by
       concatenating two substrings that respectively match the concatenated expressions.

   Alternation
       Two regular expressions may be joined by the infix operator |; the resulting regular expression matches  any
       string matching either alternate expression.

   Precedence
       Repetition  takes  precedence  over concatenation, which in turn takes precedence over alternation.  A whole
       expression may be enclosed in parentheses to override these precedence rules and form a subexpression.

   Back References and Subexpressions
       The back-reference \n, where n is a single digit, matches  the  substring  previously  matched  by  the  nth
       parenthesized subexpression of the regular expression.

   Basic vs Extended Regular Expressions
       In  basic  regular  expressions the meta-characters ?, +, {, |, (, and ) lose their special meaning; instead
       use the backslashed versions \?, \+, \{, \|, \(, and \).

       Traditional egrep did not support the { meta-character, and some egrep implementations support  \{  instead,
       so portable scripts should avoid { in grep -E patterns and should use [{] to match a literal {.

       GNU grep -E attempts to support traditional usage by assuming that { is not special if it would be the start
       of an invalid interval specification.  For example, the command grep -E '{1' searches for the  two-character
       string  {1  instead of reporting a syntax error in the regular expression.  POSIX allows this behavior as an
       extension, but portable scripts should avoid it.

ENVIRONMENT VARIABLES
       The behavior of grep is affected by the following environment variables.

       The locale for category LC_foo is specified by examining the three  environment  variables  LC_ALL,  LC_foo,
       LANG, in that order.  The first of these variables that is set specifies the locale.  For example, if LC_ALL
       is not set, but LC_MESSAGES is set  to  pt_BR,  then  the  Brazilian  Portuguese  locale  is  used  for  the
       LC_MESSAGES  category.   The  C locale is used if none of these environment variables are set, if the locale
       catalog is not installed, or if grep was not compiled with national language support (NLS).

       GREP_OPTIONS
              This variable specifies default options to be placed in front of any explicit options.  For  example,
              if  GREP_OPTIONS  is  '--binary-files=without-match  --directories=skip',  grep behaves as if the two
              options --binary-files=without-match and --directories=skip had been specified  before  any  explicit
              options.  Option specifications are separated by whitespace.  A backslash escapes the next character,
              so it can be used to specify an option containing whitespace or a backslash.

       GREP_COLOR
              This variable specifies the color used to highlight matched (non-empty) text.  It  is  deprecated  in
              favor  of  GREP_COLORS,  but  still  supported.   The mt, ms, and mc capabilities of GREP_COLORS have
              priority over it.  It can only specify the color used to highlight the matching non-empty text in any
              matching  line (a selected line when the -v command-line option is omitted, or a context line when -v
              is specified).  The default is 01;31, which means a  bold  red  foreground  text  on  the  terminal's
              default background.

       GREP_COLORS
              Specifies  the  colors and other attributes used to highlight various parts of the output.  Its value
              is      a      colon-separated      list      of      capabilities       that       defaults       to
              ms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36  with  the  rv  and ne boolean capabilities omitted
              (i.e., false).  Supported capabilities are as follows.

              sl=    SGR substring for whole selected lines (i.e., matching lines when the -v  command-line  option
                     is omitted, or non-matching lines when -v is specified).  If however the boolean rv capability
                     and the -v command-line option are both  specified,  it  applies  to  context  matching  lines
                     instead.  The default is empty (i.e., the terminal's default color pair).

              cx=    SGR  substring  for  whole  context  lines  (i.e., non-matching lines when the -v command-line
                     option is omitted, or matching lines when  -v  is  specified).   If  however  the  boolean  rv
                     capability  and  the  -v  command-line  option are both specified, it applies to selected non-
                     matching lines instead.  The default is empty (i.e., the terminal's default color pair).

              rv     Boolean value that reverses (swaps) the meanings of the sl= and cx= capabilities when  the  -v
                     command-line option is specified.  The default is false (i.e., the capability is omitted).

              mt=01;31
                     SGR substring for matching non-empty text in any matching line (i.e., a selected line when the
                     -v command-line option is omitted, or a context line when -v is specified).  Setting  this  is
                     equivalent  to  setting both ms= and mc= at once to the same value.  The default is a bold red
                     text foreground over the current line background.

              ms=01;31
                     SGR substring for matching non-empty text in a selected line.  (This is only used when the  -v
                     command-line  option  is  omitted.)   The  effect of the sl= (or cx= if rv) capability remains
                     active when this kicks in.  The default is a bold red text foreground over  the  current  line
                     background.

              mc=01;31
                     SGR  substring  for matching non-empty text in a context line.  (This is only used when the -v
                     command-line option is specified.)  The effect of the cx= (or sl= if  rv)  capability  remains
                     active  when  this  kicks in.  The default is a bold red text foreground over the current line
                     background.

              fn=35  SGR substring for file names prefixing any content  line.   The  default  is  a  magenta  text
                     foreground over the terminal's default background.

              ln=32  SGR  substring  for  line  numbers  prefixing  any  content line.  The default is a green text
                     foreground over the terminal's default background.

              bn=32  SGR substring for byte offsets prefixing any content  line.   The  default  is  a  green  text
                     foreground over the terminal's default background.

              se=36  SGR  substring  for  separators  that  are  inserted between selected line fields (:), between
                     context line fields, (-), and between  groups  of  adjacent  lines  when  nonzero  context  is
                     specified (--).  The default is a cyan text foreground over the terminal's default background.

              ne     Boolean  value  that  prevents  clearing  to the end of line using Erase in Line (EL) to Right
                     (\33[K) each time a colorized item ends.  This is needed on  terminals  on  which  EL  is  not
                     supported.   It  is otherwise useful on terminals for which the back_color_erase (bce) boolean
                     terminfo capability does not apply, when  the  chosen  highlight  colors  do  not  affect  the
                     background,  or  when  EL is too slow or causes too much flicker.  The default is false (i.e.,
                     the capability is omitted).

              Note that boolean capabilities have no =...  part.  They are omitted (i.e.,  false)  by  default  and
              become true when specified.

              See the Select Graphic Rendition (SGR) section in the documentation of the text terminal that is used
              for permitted values and their meaning as character attributes.  These substring values are  integers
              in decimal representation and can be concatenated with semicolons.  grep takes care of assembling the
              result into a complete SGR sequence (\33[...m).  Common values to concatenate include 1 for  bold,  4
              for  underline,  5 for blink, 7 for inverse, 39 for default foreground color, 30 to 37 for foreground
              colors, 90 to 97 for 16-color mode foreground colors, 38;5;0 to 38;5;255 for 88-color  and  256-color
              modes  foreground colors, 49 for default background color, 40 to 47 for background colors, 100 to 107
              for 16-color mode background colors,  and  48;5;0  to  48;5;255  for  88-color  and  256-color  modes
              background colors.

       LC_ALL, LC_COLLATE, LANG
              These  variables  specify  the  locale  for  the  LC_COLLATE category, which determines the collating
              sequence used to interpret range expressions like [a-z].

       LC_ALL, LC_CTYPE, LANG
              These variables specify  the  locale  for  the  LC_CTYPE  category,  which  determines  the  type  of
              characters, e.g., which characters are whitespace.

       LC_ALL, LC_MESSAGES, LANG
              These  variables  specify the locale for the LC_MESSAGES category, which determines the language that
              grep uses for messages.  The default C locale uses American English messages.

       POSIXLY_CORRECT
              If set, grep behaves as POSIX requires; otherwise, grep behaves more like other GNU programs.   POSIX
              requires  that options that follow file names must be treated as file names; by default, such options
              are permuted to the front of the operand list and are treated as options.  Also, POSIX requires  that
              unrecognized  options  be  diagnosed  as “illegal”, but since they are not really against the law the
              default    is    to    diagnose    them    as    “invalid”.     POSIXLY_CORRECT     also     disables
              _N_GNU_nonoption_argv_flags_, described below.

       _N_GNU_nonoption_argv_flags_
              (Here  N is grep's numeric process ID.)  If the ith character of this environment variable's value is
              1, do not consider the ith operand of grep to be an option, even if it appears to be  one.   A  shell
              can  put this variable in the environment for each command it runs, specifying which operands are the
              results of file name wildcard expansion and  therefore  should  not  be  treated  as  options.   This
              behavior is available only with the GNU C library, and only when POSIXLY_CORRECT is not set.

EXIT STATUS
       Normally,  the exit status is 0 if selected lines are found and 1 otherwise.  But the exit status is 2 if an
       error occurred, unless the -q or --quiet or --silent option is used and a selected  line  is  found.   Note,
       however, that POSIX only mandates, for programs such as grep, cmp, and diff, that the exit status in case of
       error be greater than 1; it is therefore advisable, for the sake of portability, to use logic that tests for
       this general condition instead of strict equality with 2.

COPYRIGHT
       Copyright 1998-2000, 2002, 2005-2014 Free Software Foundation, Inc.

       This  is  free  software;  see  the  source  for  copying  conditions.   There  is NO warranty; not even for
       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

BUGS
   Reporting Bugs
       Email    bug    reports    to    <bug-grep@gnu.org>,    a    mailing    list    whose    web     page     is
       <http://lists.gnu.org/mailman/listinfo/bug-grep>.     grep's    Savannah   bug   tracker   is   located   at
       <http://savannah.gnu.org/bugs/?group=grep>.

   Known Bugs
       Large repetition counts in the {n,m} construct may cause grep to use lots of memory.  In  addition,  certain
       other  obscure  regular  expressions  require  exponential  time and space, and may cause grep to run out of
       memory.

       Back-references are very slow, and may require exponential time.

SEE ALSO
   Regular Manual Pages
       awk(1), cmp(1), diff(1), find(1), gzip(1), perl(1), sed(1), sort(1), xargs(1), zgrep(1),  read(2),  pcre(3),
       pcresyntax(3), pcrepattern(3), terminfo(5), glob(7), regex(7).

   POSIX Programmer's Manual Page
       grep(1p).

   TeXinfo Documentation
       The   full   documentation   for   grep   is  maintained  as  a  TeXinfo  manual,  which  you  can  read  at
       http://www.gnu.org/software/grep/manual/.  If the info and grep programs  are  properly  installed  at  your
       site, the command

              info grep

       should give you access to the complete manual.

NOTES
       This man page is maintained only fitfully; the full documentation is often more up-to-date.

       GNU's not Unix, but Unix is a beast; its plural form is Unixen.



User Commands                                      GNU grep 2.20                                            GREP(1)
GAWK(1)                                           Utility Commands                                          GAWK(1)



NAME
       gawk - pattern scanning and processing language

SYNOPSIS
       gawk [ POSIX or GNU style options ] -f program-file [ -- ] file ...
       gawk [ POSIX or GNU style options ] [ -- ] program-text file ...

       pgawk [ POSIX or GNU style options ] -f program-file [ -- ] file ...
       pgawk [ POSIX or GNU style options ] [ -- ] program-text file ...

       dgawk [ POSIX or GNU style options ] -f program-file [ -- ] file ...

DESCRIPTION
       Gawk  is the GNU Project's implementation of the AWK programming language.  It conforms to the definition of
       the language in the POSIX 1003.1 Standard.  This version in turn is based on the description in The AWK Pro‐
       gramming  Language,  by  Aho, Kernighan, and Weinberger.  Gawk provides the additional features found in the
       current version of UNIX awk and a number of GNU-specific extensions.

       The command line consists of options to gawk itself, the AWK program text (if not supplied  via  the  -f  or
       --file options), and values to be made available in the ARGC and ARGV pre-defined AWK variables.

       Pgawk is the profiling version of gawk.  It is identical in every way to gawk, except that programs run more
       slowly, and it automatically produces an execution profile in the  file  awkprof.out  when  done.   See  the
       --profile option, below.

       Dgawk  is  an  awk  debugger. Instead of running the program directly, it loads the AWK source code and then
       prompts for debugging commands.  Unlike gawk and pgawk, dgawk only processes  AWK  program  source  provided
       with the -f option.  The debugger is documented in GAWK: Effective AWK Programming.

OPTION FORMAT
       Gawk  options  may  be  either traditional POSIX-style one letter options, or GNU-style long options.  POSIX
       options start with a single “-”, while long options start with “--”.  Long options  are  provided  for  both
       GNU-specific features and for POSIX-mandated features.

       Gawk-  specific options are typically used in long-option form.  Arguments to long options are either joined
       with the option by an = sign, with no intervening spaces, or they may be provided in the next  command  line
       argument.  Long options may be abbreviated, as long as the abbreviation remains unique.

       Additionally,  each  long option has a corresponding short option, so that the option's functionality may be
       used from within #!  executable scripts.

OPTIONS
       Gawk accepts the following options.  Standard options are listed first, followed by options for gawk  exten‐
       sions, listed alphabetically by short option.

       -f program-file
       --file program-file
              Read  the AWK program source from the file program-file, instead of from the first command line argu‐
              ment.  Multiple -f (or --file) options may be used.

       -F fs
       --field-separator fs
              Use fs for the input field separator (the value of the FS predefined variable).

       -v var=val
       --assign var=val
              Assign the value val to the variable var, before execution of the program begins.  Such variable val‐
              ues are available to the BEGIN block of an AWK program.

       -b
       --characters-as-bytes
              Treat all input data as single-byte characters. In other words, don't pay any attention to the locale
              information when attempting to process strings as multibyte characters.  The --posix option overrides
              this one.

       -c
       --traditional
              Run  in compatibility mode.  In compatibility mode, gawk behaves identically to UNIX awk; none of the
              GNU-specific extensions are recognized.  See GNU EXTENSIONS, below, for more information.

       -C
       --copyright
              Print the short version of the GNU copyright information message on the standard output and exit suc‐
              cessfully.

       -d[file]
       --dump-variables[=file]
              Print  a  sorted  list of global variables, their types and final values to file.  If no file is pro‐
              vided, gawk uses a file named awkvars.out in the current directory.
              Having a list of all the global variables is a good way to look for typographical errors in your pro‐
              grams.   You  would also use this option if you have a large program with a lot of functions, and you
              want to be sure that your functions don't inadvertently use global variables that  you  meant  to  be
              local.   (This  is  a  particularly easy mistake to make with simple variable names like i, j, and so
              on.)

       -e program-text
       --source program-text
              Use program-text as AWK program source code.  This option allows  the  easy  intermixing  of  library
              functions  (used  via the -f and --file options) with source code entered on the command line.  It is
              intended primarily for medium to large AWK programs used in shell scripts.

       -E file
       --exec file
              Similar to -f, however, this is option is the last one  processed.   This  should  be  used  with  #!
              scripts,  particularly  for  CGI  applications, to avoid passing in options or source code (!) on the
              command line from a URL.  This option disables command-line variable assignments.

       -g
       --gen-pot
              Scan and parse the AWK program, and generate a GNU .pot (Portable Object  Template)  format  file  on
              standard  output  with entries for all localizable strings in the program.  The program itself is not
              executed.  See the GNU gettext distribution for more information on .pot files.

       -h
       --help Print a relatively short summary of the available options on the standard output.  (Per the GNU  Cod‐
              ing Standards, these options cause an immediate, successful exit.)

       -L [value]
       --lint[=value]
              Provide  warnings  about  constructs  that  are dubious or non-portable to other AWK implementations.
              With an optional argument of fatal, lint warnings become fatal errors.  This may be drastic, but  its
              use  will  certainly encourage the development of cleaner AWK programs.  With an optional argument of
              invalid, only warnings about things that are actually invalid are issued. (This is not  fully  imple‐
              mented yet.)

       -n
       --non-decimal-data
              Recognize octal and hexadecimal values in input data.  Use this option with great caution!

       -N
       --use-lc-numeric
              This  forces  gawk to use the locale's decimal point character when parsing input data.  Although the
              POSIX standard requires this behavior, and gawk does so when --posix is in effect, the default is  to
              follow  traditional  behavior and use a period as the decimal point, even in locales where the period
              is not the decimal point character.  This option overrides the default  behavior,  without  the  full
              draconian strictness of the --posix option.

       -O
       --optimize
              Enable  optimizations upon the internal representation of the program.  Currently, this includes just
              simple constant-folding. The gawk maintainer hopes to add additional optimizations over time.

       -p[prof_file]
       --profile[=prof_file]
              Send profiling data to prof_file.  The default is awkprof.out.  When run with gawk,  the  profile  is
              just  a “pretty printed” version of the program.  When run with pgawk, the profile contains execution
              counts of each statement in the program in the left margin and function call counts  for  each  user-
              defined function.

       -P
       --posix
              This turns on compatibility mode, with the following additional restrictions:

              · \x escape sequences are not recognized.

              · Only space and tab act as field separators when FS is set to a single space, newline does not.

              · You cannot continue lines after ?  and :.

              · The synonym func for the keyword function is not recognized.

              · The operators ** and **= cannot be used in place of ^ and ^=.

       -r
       --re-interval
              Enable  the  use  of  interval  expressions  in regular expression matching (see Regular Expressions,
              below).  Interval expressions were not traditionally available in the AWK language.  The POSIX  stan‐
              dard  added them, to make awk and egrep consistent with each other.  They are enabled by default, but
              this option remains for use with --traditional.

       -R
       --command file
              Dgawk only.  Read stored debugger commands from file.

       -S
       --sandbox
              Runs gawk in sandbox mode, disabling the system() function, input redirection  with  getline,  output
              redirection  with print and printf, and loading dynamic extensions.  Command execution (through pipe‐
              lines) is also disabled.  This effectively blocks a script from accessing local resources (except for
              the files specified on the command line).

       -t
       --lint-old
              Provide warnings about constructs that are not portable to the original version of Unix awk.

       -V
       --version
              Print  version  information  for this particular copy of gawk on the standard output.  This is useful
              mainly for knowing if the current copy of gawk on your system is up to date with respect to  whatever
              the Free Software Foundation is distributing.  This is also useful when reporting bugs.  (Per the GNU
              Coding Standards, these options cause an immediate, successful exit.)

       --     Signal the end of options. This is useful to allow further arguments to the  AWK  program  itself  to
              start  with a “-”.  This provides consistency with the argument parsing convention used by most other
              POSIX programs.

       In compatibility mode, any other options are flagged as invalid, but are otherwise ignored.  In normal oper‐
       ation,  as  long  as program text has been supplied, unknown options are passed on to the AWK program in the
       ARGV array for processing.  This is particularly useful for running AWK programs  via  the  “#!”  executable
       interpreter mechanism.

AWK PROGRAM EXECUTION
       An AWK program consists of a sequence of pattern-action statements and optional function definitions.

              @include "filename" pattern   { action statements }
              function name(parameter list) { statements }

       Gawk  first  reads  the program source from the program-file(s) if specified, from arguments to --source, or
       from the first non-option argument on the command line.  The -f and --source options may  be  used  multiple
       times  on the command line.  Gawk reads the program text as if all the program-files and command line source
       texts had been concatenated together.  This is useful for building libraries of AWK functions, without  hav‐
       ing  to  include  them  in each new AWK program that uses them.  It also provides the ability to mix library
       functions with command line programs.

       In addition, lines beginning with @include may be used to include other source files into your program, mak‐
       ing library use even easier.

       The  environment variable AWKPATH specifies a search path to use when finding source files named with the -f
       option.  If this variable does not exist, the default path is ".:/usr/local/share/awk".  (The actual  direc‐
       tory may vary, depending upon how gawk was built and installed.)  If a file name given to the -f option con‐
       tains a “/” character, no path search is performed.

       Gawk executes AWK programs in the following order.  First, all variable assignments  specified  via  the  -v
       option  are performed.  Next, gawk compiles the program into an internal form.  Then, gawk executes the code
       in the BEGIN block(s) (if any), and then proceeds to  read  each  file  named  in  the  ARGV  array  (up  to
       ARGV[ARGC]).  If there are no files named on the command line, gawk reads the standard input.

       If a filename on the command line has the form var=val it is treated as a variable assignment.  The variable
       var will be assigned the value val.  (This happens after any BEGIN block(s) have been  run.)   Command  line
       variable assignment is most useful for dynamically assigning values to the variables AWK uses to control how
       input is broken into fields and records.  It is also useful for controlling state  if  multiple  passes  are
       needed over a single data file.

       If the value of a particular element of ARGV is empty (""), gawk skips over it.

       For  each  input  file,  if a BEGINFILE rule exists, gawk executes the associated code before processing the
       contents of the file. Similarly, gawk executes the code associated with ENDFILE after processing the file.

       For each record in the input, gawk tests to see if it matches any pattern in the AWK program.  For each pat‐
       tern  that the record matches, the associated action is executed.  The patterns are tested in the order they
       occur in the program.

       Finally, after all the input is exhausted, gawk executes the code in the END block(s) (if any).

   Command Line Directories
       According to POSIX, files named on the awk command line must be text files.  The behavior  is  ``undefined''
       if they are not.  Most versions of awk treat a directory on the command line as a fatal error.

       Starting  with  version  4.0  of  gawk, a directory on the command line produces a warning, but is otherwise
       skipped.  If either of the --posix or --traditional options is given, then gawk reverts to treating directo‐
       ries on the command line as a fatal error.

VARIABLES, RECORDS AND FIELDS
       AWK  variables  are  dynamic;  they  come  into existence when they are first used.  Their values are either
       floating-point numbers or strings, or both, depending upon how they are used.  AWK also has one  dimensional
       arrays;  arrays  with multiple dimensions may be simulated.  Several pre-defined variables are set as a pro‐
       gram runs; these are described as needed and summarized below.

   Records
       Normally, records are separated by newline characters.  You can control how records are separated by assign‐
       ing  values  to  the built-in variable RS.  If RS is any single character, that character separates records.
       Otherwise, RS is a regular expression.  Text in the input that matches this regular expression separates the
       record.  However, in compatibility mode, only the first character of its string value is used for separating
       records.  If RS is set to the null string, then records are separated by blank lines.  When RS is set to the
       null  string,  the  newline character always acts as a field separator, in addition to whatever value FS may
       have.

   Fields
       As each input record is read, gawk splits the record into fields, using the value of the FS variable as  the
       field  separator.   If  FS is a single character, fields are separated by that character.  If FS is the null
       string, then each individual character becomes a separate field.  Otherwise, FS is expected  to  be  a  full
       regular  expression.   In the special case that FS is a single space, fields are separated by runs of spaces
       and/or tabs and/or newlines.  (But see the section POSIX COMPATIBILITY, below).  NOTE: The value of  IGNORE‐
       CASE (see below) also affects how fields are split when FS is a regular expression, and how records are sep‐
       arated when RS is a regular expression.

       If the FIELDWIDTHS variable is set to a space separated list of numbers, each  field  is  expected  to  have
       fixed width, and gawk splits up the record using the specified widths.  The value of FS is ignored.  Assign‐
       ing a new value to FS or FPAT overrides the use of FIELDWIDTHS.

       Similarly, if the FPAT variable is set to a string representing a regular expression, each field is made  up
       of  text  that  matches  that  regular expression. In this case, the regular expression describes the fields
       themselves, instead of the text that separates the fields.  Assigning a new value to FS or FIELDWIDTHS over‐
       rides the use of FPAT.

       Each  field  in  the  input  record  may  be referenced by its position, $1, $2, and so on.  $0 is the whole
       record.  Fields need not be referenced by constants:

              n = 5
              print $n

       prints the fifth field in the input record.

       The variable NF is set to the total number of fields in the input record.

       References to non-existent fields (i.e. fields after $NF) produce the null-string.  However, assigning to  a
       non-existent  field  (e.g.,  $(NF+2) = 5) increases the value of NF, creates any intervening fields with the
       null string as their value, and causes the value of $0 to be recomputed, with the fields being separated  by
       the  value  of OFS.  References to negative numbered fields cause a fatal error.  Decrementing NF causes the
       values of fields past the new value to be lost, and the value of $0 to be recomputed, with the fields  being
       separated by the value of OFS.

       Assigning  a  value to an existing field causes the whole record to be rebuilt when $0 is referenced.  Simi‐
       larly, assigning a value to $0 causes the record to be resplit, creating new values for the fields.

   Built-in Variables
       Gawk's built-in variables are:

       ARGC        The number of command line arguments (does not include options to gawk, or the program source).

       ARGIND      The index in ARGV of the current file being processed.

       ARGV        Array of command line arguments.  The array is indexed from 0 to ARGC - 1.  Dynamically changing
                   the contents of ARGV can control the files used for data.

       BINMODE     On  non-POSIX systems, specifies use of “binary” mode for all file I/O.  Numeric values of 1, 2,
                   or 3, specify that input files, output files, or all files, respectively, should use binary I/O.
                   String values of "r", or "w" specify that input files, or output files, respectively, should use
                   binary I/O.  String values of "rw" or "wr" specify that all files should use  binary  I/O.   Any
                   other string value is treated as "rw", but generates a warning message.

       CONVFMT     The conversion format for numbers, "%.6g", by default.

       ENVIRON     An array containing the values of the current environment.  The array is indexed by the environ‐
                   ment variables, each element being the value of that variable (e.g.,  ENVIRON["HOME"]  might  be
                   /home/arnold).   Changing this array does not affect the environment seen by programs which gawk
                   spawns via redirection or the system() function.

       ERRNO       If a system error occurs either doing a redirection for getline, during a read for  getline,  or
                   during  a  close(), then ERRNO will contain a string describing the error.  The value is subject
                   to translation in non-English locales.

       FIELDWIDTHS A whitespace separated list of field widths.  When set, gawk parses the  input  into  fields  of
                   fixed  width, instead of using the value of the FS variable as the field separator.  See Fields,
                   above.

       FILENAME    The name of the current input file.  If no files are specified on the command line, the value of
                   FILENAME is “-”.  However, FILENAME is undefined inside the BEGIN block (unless set by getline).

       FNR         The input record number in the current input file.

       FPAT        A  regular  expression describing the contents of the fields in a record.  When set, gawk parses
                   the input into fields, where the fields match the regular expression, instead of using the value
                   of the FS variable as the field separator.  See Fields, above.

       FS          The input field separator, a space by default.  See Fields, above.

       IGNORECASE  Controls  the  case-sensitivity  of all regular expression and string operations.  If IGNORECASE
                   has a non-zero value, then string comparisons and pattern matching  in  rules,  field  splitting
                   with  FS and FPAT, record separating with RS, regular expression matching with ~ and !~, and the
                   gensub(), gsub(), index(), match(), patsplit(), split(), and sub() built-in functions all ignore
                   case  when doing regular expression operations.  NOTE: Array subscripting is not affected.  How‐
                   ever, the asort() and asorti() functions are affected.
                   Thus, if IGNORECASE is not equal to zero, /aB/ matches all of the strings "ab", "aB", "Ab",  and
                   "AB".   As  with  all  AWK  variables,  the  initial value of IGNORECASE is zero, so all regular
                   expression and string operations are normally case-sensitive.

       LINT        Provides dynamic control of the --lint option from within  an  AWK  program.   When  true,  gawk
                   prints  lint  warnings.  When  false, it does not.  When assigned the string value "fatal", lint
                   warnings become fatal errors, exactly like --lint=fatal.  Any other true value just prints warn‐
                   ings.

       NF          The number of fields in the current input record.

       NR          The total number of input records seen so far.

       OFMT        The output format for numbers, "%.6g", by default.

       OFS         The output field separator, a space by default.

       ORS         The output record separator, by default a newline.

       PROCINFO    The elements of this array provide access to information about the running AWK program.  On some
                   systems, there may be elements in the array, "group1" through "groupn" for some n, which is  the
                   number of supplementary groups that the process has.  Use the in operator to test for these ele‐
                   ments.  The following elements are guaranteed to be available:

                   PROCINFO["egid"]    the value of the getegid(2) system call.

                   PROCINFO["strftime"]
                                       The default time format string for strftime().

                   PROCINFO["euid"]    the value of the geteuid(2) system call.

                   PROCINFO["FS"]      "FS" if field splitting with FS is in effect, "FPAT" if field splitting with
                                       FPAT  is  in effect, or "FIELDWIDTHS" if field splitting with FIELDWIDTHS is
                                       in effect.

                   PROCINFO["gid"]     the value of the getgid(2) system call.

                   PROCINFO["pgrpid"]  the process group ID of the current process.

                   PROCINFO["pid"]     the process ID of the current process.

                   PROCINFO["ppid"]    the parent process ID of the current process.

                   PROCINFO["uid"]     the value of the getuid(2) system call.

                   PROCINFO["sorted_in"]
                                       If this element exists in PROCINFO, then its value  controls  the  order  in
                                       which  array  elements  are  traversed  in  for loops.  Supported values are
                                       "@ind_str_asc",     "@ind_num_asc",     "@val_type_asc",     "@val_str_asc",
                                       "@val_num_asc",    "@ind_str_desc",    "@ind_num_desc",    "@val_type_desc",
                                       "@val_str_desc", "@val_num_desc", and "@unsorted".  The value  can  also  be
                                       the name of any comparison function defined as follows:

                          function cmp_func(i1, v1, i2, v2)

                   where  i1 and i2 are the indices, and v1 and v2 are the corresponding values of the two elements
                   being compared.  It should return a number less than, equal to, or greater than 0, depending  on
                   how the elements of the array are to be ordered.

                   PROCINFO["version"]
                          the version of gawk.

       RS          The input record separator, by default a newline.

       RT          The  record  terminator.   Gawk  sets RT to the input text that matched the character or regular
                   expression specified by RS.

       RSTART      The index of the first character matched by match(); 0 if no match.  (This implies that  charac‐
                   ter indices start at one.)

       RLENGTH     The length of the string matched by match(); -1 if no match.

       SUBSEP      The character used to separate multiple subscripts in array elements, by default "\034".

       TEXTDOMAIN  The  text  domain  of the AWK program; used to find the localized translations for the program's
                   strings.

   Arrays
       Arrays are subscripted with an expression between square brackets ([  and  ]).   If  the  expression  is  an
       expression  list  (expr,  expr ...)  then the array subscript is a string consisting of the concatenation of
       the (string) value of each expression, separated by the value of the SUBSEP variable.  This facility is used
       to simulate multiply dimensioned arrays.  For example:

              i = "A"; j = "B"; k = "C"
              x[i, j, k] = "hello, world\n"

       assigns  the  string  "hello,  world\n"  to  the  element  of  the  array  x  which is indexed by the string
       "A\034B\034C".  All arrays in AWK are associative, i.e. indexed by string values.

       The special operator in may be used to test if an array has an index consisting of a particular value:

              if (val in array)
                   print array[val]

       If the array has multiple subscripts, use (i, j) in array.

       The in construct may also be used in a for loop to iterate over all the elements of an array.

       An element may be deleted from an array using the delete statement.  The delete statement may also  be  used
       to delete the entire contents of an array, just by specifying the array name without a subscript.

       gawk  supports true multidimensional arrays. It does not require that such arrays be ``rectangular'' as in C
       or C++.  For example:
              a[1] = 5
              a[2][1] = 6
              a[2][2] = 7

   Variable Typing And Conversion
       Variables and fields may be (floating point) numbers, or strings, or both.  How the value of a  variable  is
       interpreted  depends  upon its context.  If used in a numeric expression, it will be treated as a number; if
       used as a string it will be treated as a string.

       To force a variable to be treated as a number, add 0 to it; to force it to be treated as a string,  concate‐
       nate it with the null string.

       When  a  string  must be converted to a number, the conversion is accomplished using strtod(3).  A number is
       converted to a string by using the value of CONVFMT as a format string  for  sprintf(3),  with  the  numeric
       value of the variable as the argument.  However, even though all numbers in AWK are floating-point, integral
       values are always converted as integers.  Thus, given

              CONVFMT = "%2.2f"
              a = 12
              b = a ""

       the variable b has a string value of "12" and not "12.00".

       NOTE: When operating in POSIX mode (such as with the --posix command line option), beware that  locale  set‐
       tings  may  interfere with the way decimal numbers are treated: the decimal separator of the numbers you are
       feeding to gawk must conform to what your locale would expect, be it a comma (,) or a period (.).

       Gawk performs comparisons as follows: If two variables are numeric, they are compared numerically.   If  one
       value is numeric and the other has a string value that is a “numeric string,” then comparisons are also done
       numerically.  Otherwise, the numeric value is converted to a string and a string  comparison  is  performed.
       Two strings are compared, of course, as strings.

       Note  that  string constants, such as "57", are not numeric strings, they are string constants.  The idea of
       “numeric string” only applies to fields, getline input, FILENAME, ARGV elements, ENVIRON  elements  and  the
       elements of an array created by split() or patsplit() that are numeric strings.  The basic idea is that user
       input, and only user input, that looks numeric, should be treated that way.

       Uninitialized variables have the numeric value 0 and the string value "" (the null, or empty, string).

   Octal and Hexadecimal Constants
       You may use C-style octal and hexadecimal constants in your AWK program source code.  For example, the octal
       value 011 is equal to decimal 9, and the hexadecimal value 0x11 is equal to decimal 17.

   String Constants
       String  constants  in AWK are sequences of characters enclosed between double quotes (like "value").  Within
       strings, certain escape sequences are recognized, as in C.  These are:

       \\   A literal backslash.

       \a   The “alert” character; usually the ASCII BEL character.

       \b   backspace.

       \f   form-feed.

       \n   newline.

       \r   carriage return.

       \t   horizontal tab.

       \v   vertical tab.

       \xhex digits
            The character represented by the string of hexadecimal digits following the \x.  As in ANSI C, all fol‐
            lowing  hexadecimal  digits  are  considered part of the escape sequence.  (This feature should tell us
            something about language design by committee.)  E.g., "\x1B" is the ASCII ESC (escape) character.

       \ddd The character represented by the 1-, 2-, or 3-digit sequence of octal  digits.   E.g.,  "\033"  is  the
            ASCII ESC (escape) character.

       \c   The literal character c.

       The  escape  sequences  may  also be used inside constant regular expressions (e.g., /[ \t\f\n\r\v]/ matches
       whitespace characters).

       In compatibility mode, the characters represented by octal and hexadecimal escape sequences are treated lit‐
       erally when used in regular expression constants.  Thus, /a\52b/ is equivalent to /a\*b/.

PATTERNS AND ACTIONS
       AWK  is  a  line-oriented  language.   The  pattern comes first, and then the action.  Action statements are
       enclosed in { and }.  Either the pattern may be missing, or the action may be missing, but, of  course,  not
       both.  If the pattern is missing, the action is executed for every single record of input.  A missing action
       is equivalent to

              { print }

       which prints the entire record.

       Comments begin with the # character, and continue until the end of the line.  Blank lines  may  be  used  to
       separate  statements.   Normally,  a  statement ends with a newline, however, this is not the case for lines
       ending in a comma, {, ?, :, &&, or ||.  Lines ending in do or else also have their statements  automatically
       continued  on the following line.  In other cases, a line can be continued by ending it with a “\”, in which
       case the newline is ignored.

       Multiple statements may be put on one line by separating them with a “;”.  This applies to both  the  state‐
       ments within the action part of a pattern-action pair (the usual case), and to the pattern-action statements
       themselves.

   Patterns
       AWK patterns may be one of the following:

              BEGIN
              END
              BEGINFILE
              ENDFILE
              /regular expression/
              relational expression
              pattern && pattern
              pattern || pattern
              pattern ? pattern : pattern
              (pattern)
              ! pattern
              pattern1, pattern2

       BEGIN and END are two special kinds of patterns which are not tested against the input.  The action parts of
       all  BEGIN  patterns are merged as if all the statements had been written in a single BEGIN block.  They are
       executed before any of the input is read.  Similarly, all the END blocks are merged, and executed  when  all
       the  input  is exhausted (or when an exit statement is executed).  BEGIN and END patterns cannot be combined
       with other patterns in pattern expressions.  BEGIN and END patterns cannot have missing action parts.

       BEGINFILE and ENDFILE are additional special patterns whose bodies are executed  before  reading  the  first
       record of each command line input file and after reading the last record of each file.  Inside the BEGINFILE
       rule, the value of ERRNO will be the empty string if the file  could  be  opened  successfully.   Otherwise,
       there  is  some problem with the file and the code should use nextfile to skip it. If that is not done, gawk
       produces its usual fatal error for files that cannot be opened.

       For /regular expression/ patterns, the associated statement is executed for each input record  that  matches
       the regular expression.  Regular expressions are the same as those in egrep(1), and are summarized below.

       A  relational expression may use any of the operators defined below in the section on actions.  These gener‐
       ally test whether certain fields match certain regular expressions.

       The &&, ||, and !  operators are logical AND, logical OR, and logical NOT, respectively, as in C.   They  do
       short-circuit  evaluation,  also as in C, and are used for combining more primitive pattern expressions.  As
       in most languages, parentheses may be used to change the order of evaluation.

       The ?: operator is like the same operator in C.  If the first pattern is true  then  the  pattern  used  for
       testing  is  the  second  pattern,  otherwise it is the third.  Only one of the second and third patterns is
       evaluated.

       The pattern1, pattern2 form of an expression is called a range pattern.  It matches all input records start‐
       ing with a record that matches pattern1, and continuing until a record that matches pattern2, inclusive.  It
       does not combine with any other sort of pattern expression.

   Regular Expressions
       Regular expressions are the extended kind found in egrep.  They are composed of characters as follows:

       c          matches the non-metacharacter c.

       \c         matches the literal character c.

       .          matches any character including newline.

       ^          matches the beginning of a string.

       $          matches the end of a string.

       [abc...]   character list, matches any of the characters abc....

       [^abc...]  negated character list, matches any character except abc....

       r1|r2      alternation: matches either r1 or r2.

       r1r2       concatenation: matches r1, and then r2.

       r+         matches one or more r's.

       r*         matches zero or more r's.

       r?         matches zero or one r's.

       (r)        grouping: matches r.

       r{n}
       r{n,}
       r{n,m}     One or two numbers inside braces denote an interval expression.  If there is one  number  in  the
                  braces,  the  preceding regular expression r is repeated n times.  If there are two numbers sepa‐
                  rated by a comma, r is repeated n to m times.  If there is one number followed by a comma, then r
                  is repeated at least n times.

       \y         matches the empty string at either the beginning or the end of a word.

       \B         matches the empty string within a word.

       \<         matches the empty string at the beginning of a word.

       \>         matches the empty string at the end of a word.

       \s         matches any whitespace character.

       \S         matches any nonwhitespace character.

       \w         matches any word-constituent character (letter, digit, or underscore).

       \W         matches any character that is not word-constituent.

       \`         matches the empty string at the beginning of a buffer (string).

       \'         matches the empty string at the end of a buffer.

       The escape sequences that are valid in string constants (see below) are also valid in regular expressions.

       Character  classes  are a feature introduced in the POSIX standard.  A character class is a special notation
       for describing lists of characters that have a specific attribute, but where  the  actual  characters  them‐
       selves can vary from country to country and/or from character set to character set.  For example, the notion
       of what is an alphabetic character differs in the USA and in France.

       A character class is only valid in a regular expression inside the brackets of a character list.   Character
       classes  consist  of  [:,  a keyword denoting the class, and :].  The character classes defined by the POSIX
       standard are:

       [:alnum:]  Alphanumeric characters.

       [:alpha:]  Alphabetic characters.

       [:blank:]  Space or tab characters.

       [:cntrl:]  Control characters.

       [:digit:]  Numeric characters.

       [:graph:]  Characters that are both printable and visible.  (A space is printable, but not visible, while an
                  a is both.)

       [:lower:]  Lowercase alphabetic characters.

       [:print:]  Printable characters (characters that are not control characters.)

       [:punct:]  Punctuation  characters  (characters  that  are  not letter, digits, control characters, or space
                  characters).

       [:space:]  Space characters (such as space, tab, and formfeed, to name a few).

       [:upper:]  Uppercase alphabetic characters.

       [:xdigit:] Characters that are hexadecimal digits.

       For example, before the POSIX standard, to match alphanumeric  characters,  you  would  have  had  to  write
       /[A-Za-z0-9]/.   If your character set had other alphabetic characters in it, this would not match them, and
       if your character set collated differently from ASCII, this might not  even  match  the  ASCII  alphanumeric
       characters.   With the POSIX character classes, you can write /[[:alnum:]]/, and this matches the alphabetic
       and numeric characters in your character set, no matter what it is.

       Two additional special sequences can appear in character lists.  These apply to  non-ASCII  character  sets,
       which can have single symbols (called collating elements) that are represented with more than one character,
       as well as several characters that are equivalent for collating, or sorting, purposes.  (E.g., in French,  a
       plain “e” and a grave-accented “`” are equivalent.)

       Collating Symbols
              A collating symbol is a multi-character collating element enclosed in [.  and .].  For example, if ch
              is a collating element, then [[.ch.]]  is a regular expression that matches this  collating  element,
              while [ch] is a regular expression that matches either c or h.

       Equivalence Classes
              An  equivalence  class  is  a locale-specific name for a list of characters that are equivalent.  The
              name is enclosed in [= and =].  For example, the name e might be used to represent all of  “e,”  “´,”
              and “`.”  In this case, [[=e=]] is a regular expression that matches any of e, ´, or `.

       These  features are very valuable in non-English speaking locales.  The library functions that gawk uses for
       regular expression matching currently only recognize POSIX character classes; they do not recognize  collat‐
       ing symbols or equivalence classes.

       The  \y, \B, \<, \>, \s, \S, \w, \W, \`, and \' operators are specific to gawk; they are extensions based on
       facilities in the GNU regular expression libraries.

       The various command line options control how gawk interprets characters in regular expressions.

       No options
              In the default case, gawk provide all the facilities of POSIX regular expressions and the GNU regular
              expression operators described above.

       --posix
              Only POSIX regular expressions are supported, the GNU operators are not special.  (E.g., \w matches a
              literal w).

       --traditional
              Traditional Unix awk regular expressions are matched.  The GNU operators are not special, and  inter‐
              val  expressions  are  not available.  Characters described by octal and hexadecimal escape sequences
              are treated literally, even if they represent regular expression metacharacters.

       --re-interval
              Allow interval expressions in regular expressions, even if --traditional has been provided.

   Actions
       Action statements are enclosed in braces, { and }.  Action statements consist of the usual assignment,  con‐
       ditional, and looping statements found in most languages.  The operators, control statements, and input/out‐
       put statements available are patterned after those in C.

   Operators
       The operators in AWK, in order of decreasing precedence, are

       (...)       Grouping

       $           Field reference.

       ++ --       Increment and decrement, both prefix and postfix.

       ^           Exponentiation (** may also be used, and **= for the assignment operator).

       + - !       Unary plus, unary minus, and logical negation.

       * / %       Multiplication, division, and modulus.

       + -         Addition and subtraction.

       space       String concatenation.

       |   |&      Piped I/O for getline, print, and printf.

       < > <= >= != ==
                   The regular relational operators.

       ~ !~        Regular expression match, negated match.  NOTE: Do not use a constant regular expression (/foo/)
                   on  the left-hand side of a ~ or !~.  Only use one on the right-hand side.  The expression /foo/
                   ~ exp has the same meaning as (($0 ~ /foo/) ~ exp).  This is usually not what was intended.

       in          Array membership.

       &&          Logical AND.

       ||          Logical OR.

       ?:          The C conditional expression.  This has the form expr1 ? expr2 : expr3.  If expr1 is  true,  the
                   value  of the expression is expr2, otherwise it is expr3.  Only one of expr2 and expr3 is evalu‐
                   ated.

       = += -= *= /= %= ^=
                   Assignment.  Both absolute assignment (var = value) and operator-assignment  (the  other  forms)
                   are supported.

   Control Statements
       The control statements are as follows:

              if (condition) statement [ else statement ]
              while (condition) statement
              do statement while (condition)
              for (expr1; expr2; expr3) statement
              for (var in array) statement
              break
              continue
              delete array[index]
              delete array
              exit [ expression ]
              { statements }
              switch (expression) {
              case value|regex : statement
              ...
              [ default: statement ]
              }

   I/O Statements
       The input/output statements are as follows:

       close(file [, how])   Close file, pipe or co-process.  The optional how should only be used when closing one
                             end of a two-way pipe to a co-process.  It must be a  string  value,  either  "to"  or
                             "from".

       getline               Set $0 from next input record; set NF, NR, FNR.

       getline <file         Set $0 from next record of file; set NF.

       getline var           Set var from next input record; set NR, FNR.

       getline var <file     Set var from next record of file.

       command | getline [var]
                             Run command piping the output either into $0 or var, as above.

       command |& getline [var]
                             Run  command  as  a co-process piping the output either into $0 or var, as above.  Co-
                             processes are a gawk extension.  (command can also be a socket.   See  the  subsection
                             Special File Names, below.)

       next                  Stop  processing the current input record.  The next input record is read and process‐
                             ing starts over with the first pattern in the AWK program.  If the end  of  the  input
                             data is reached, the END block(s), if any, are executed.

       nextfile              Stop  processing  the  current  input file.  The next input record read comes from the
                             next input file.  FILENAME and ARGIND are updated, FNR is reset to 1,  and  processing
                             starts over with the first pattern in the AWK program. If the end of the input data is
                             reached, the END block(s), if any, are executed.

       print                 Print the current record.  The output record is terminated with the value of  the  ORS
                             variable.

       print expr-list       Print  expressions.   Each  expression  is separated by the value of the OFS variable.
                             The output record is terminated with the value of the ORS variable.

       print expr-list >file Print expressions on file.  Each expression is separated by the value of the OFS vari‐
                             able.  The output record is terminated with the value of the ORS variable.

       printf fmt, expr-list Format and print.  See The printf Statement, below.

       printf fmt, expr-list >file
                             Format and print on file.

       system(cmd-line)      Execute  the command cmd-line, and return the exit status.  (This may not be available
                             on non-POSIX systems.)

       fflush([file])        Flush any buffers associated with the open output file or pipe file.  If file is miss‐
                             ing or if it is the null string, then flush all open output files and pipes.

       Additional output redirections are allowed for print and printf.

       print ... >> file
              Appends output to the file.

       print ... | command
              Writes on a pipe.

       print ... |& command
              Sends data to a co-process or socket.  (See also the subsection Special File Names, below.)

       The  getline  command returns 1 on success, 0 on end of file, and -1 on an error.  Upon an error, ERRNO con‐
       tains a string describing the problem.

       NOTE: Failure in opening a two-way socket will result in a non-fatal error being  returned  to  the  calling
       function. If using a pipe, co-process, or socket to getline, or from print or printf within a loop, you must
       use close() to create new instances of the command or socket.  AWK does not automatically close pipes, sock‐
       ets, or co-processes when they return EOF.

   The printf Statement
       The  AWK versions of the printf statement and sprintf() function (see below) accept the following conversion
       specification formats:

       %c      A single character.  If the argument used for %c is numeric,  it  is  treated  as  a  character  and
               printed.   Otherwise,  the  argument is assumed to be a string, and the only first character of that
               string is printed.

       %d, %i  A decimal number (the integer part).

       %e, %E  A floating point number of the form [-]d.dddddde[+-]dd.  The %E format uses E instead of e.

       %f, %F  A floating point number of the form [-]ddd.dddddd.  If the system library supports it, %F is  avail‐
               able  as  well.  This is like %f, but uses capital letters for special “not a number” and “infinity”
               values. If %F is not available, gawk uses %f.

       %g, %G  Use %e or %f conversion, whichever is shorter, with nonsignificant zeros suppressed.  The %G  format
               uses %E instead of %e.

       %o      An unsigned octal number (also an integer).

       %u      An unsigned decimal number (again, an integer).

       %s      A character string.

       %x, %X  An unsigned hexadecimal number (an integer).  The %X format uses ABCDEF instead of abcdef.

       %%      A single % character; no argument is converted.

       Optional, additional parameters may lie between the % and the control letter:

       count$ Use the count'th argument at this point in the formatting.  This is called a positional specifier and
              is intended primarily for use in translated versions of format strings, not in the original  text  of
              an AWK program.  It is a gawk extension.

       -      The expression should be left-justified within its field.

       space  For numeric conversions, prefix positive values with a space, and negative values with a minus sign.

       +      The  plus  sign, used before the width modifier (see below), says to always supply a sign for numeric
              conversions, even if the data to be formatted is positive.  The + overrides the space modifier.

       #      Use an “alternate form” for certain control letters.  For %o, supply a leading zero.  For %x, and %X,
              supply  a leading 0x or 0X for a nonzero result.  For %e, %E, %f and %F, the result always contains a
              decimal point.  For %g, and %G, trailing zeros are not removed from the result.

       0      A leading 0 (zero) acts as a flag, that indicates output should be padded with zeroes instead of spa‐
              ces.   This  applies only to the numeric output formats.  This flag only has an effect when the field
              width is wider than the value to be printed.

       width  The field should be padded to this width.  The field is normally padded with spaces.  If the  0  flag
              has been used, it is padded with zeroes.

       .prec  A number that specifies the precision to use when printing.  For the %e, %E, %f and %F, formats, this
              specifies the number of digits you want printed to the right of the decimal point.  For the  %g,  and
              %G  formats,  it specifies the maximum number of significant digits.  For the %d, %i, %o, %u, %x, and
              %X formats, it specifies the minimum number of digits to print.  For %s,  it  specifies  the  maximum
              number of characters from the string that should be printed.

       The  dynamic  width  and  prec  capabilities of the ANSI C printf() routines are supported.  A * in place of
       either the width or prec specifications causes their values to be taken from the argument list to printf  or
       sprintf().   To  use a positional specifier with a dynamic width or precision, supply the count$ after the *
       in the format string.  For example, "%3$*2$.*1$s".

   Special File Names
       When doing I/O redirection from either print or printf into a file, or via getline from a file, gawk  recog‐
       nizes certain special filenames internally.  These filenames allow access to open file descriptors inherited
       from gawk's parent process (usually the shell).  These file names may also be used on the  command  line  to
       name data files.  The filenames are:

       /dev/stdin  The standard input.

       /dev/stdout The standard output.

       /dev/stderr The standard error output.

       /dev/fd/n   The file associated with the open file descriptor n.

       These are particularly useful for error messages.  For example:

              print "You blew it!" > "/dev/stderr"

       whereas you would otherwise have to use

              print "You blew it!" | "cat 1>&2"

       The following special filenames may be used with the |& co-process operator for creating TCP/IP network con‐
       nections:

       /inet/tcp/lport/rhost/rport
       /inet4/tcp/lport/rhost/rport
       /inet6/tcp/lport/rhost/rport
              Files for a TCP/IP connection on local port lport to remote host rhost on remote port rport.   Use  a
              port  of  0  to  have  the system pick a port.  Use /inet4 to force an IPv4 connection, and /inet6 to
              force an IPv6 connection.  Plain /inet uses the system default (most likely IPv4).

       /inet/udp/lport/rhost/rport
       /inet4/udp/lport/rhost/rport
       /inet6/udp/lport/rhost/rport
              Similar, but use UDP/IP instead of TCP/IP.

   Numeric Functions
       AWK has the following built-in arithmetic functions:

       atan2(y, x)   Return the arctangent of y/x in radians.

       cos(expr)     Return the cosine of expr, which is in radians.

       exp(expr)     The exponential function.

       int(expr)     Truncate to integer.

       log(expr)     The natural logarithm function.

       rand()        Return a random number N, between 0 and 1, such that 0 ≤ N < 1.

       sin(expr)     Return the sine of expr, which is in radians.

       sqrt(expr)    The square root function.

       srand([expr]) Use expr as the new seed for the random number generator.  If no expr  is  provided,  use  the
                     time of day.  The return value is the previous seed for the random number generator.

   String Functions
       Gawk has the following built-in string functions:

       asort(s [, d [, how] ]) Return  the  number of elements in the source array s.  Sort the contents of s using
                               gawk's normal rules for comparing values, and replace the indices of the sorted val‐
                               ues  s with sequential integers starting with 1. If the optional destination array d
                               is specified, then first duplicate s into d, and then sort d, leaving the indices of
                               the source array s unchanged. The optional string how controls the direction and the
                               comparison  mode.   Valid  values  for  how  are  any  of  the  strings  valid   for
                               PROCINFO["sorted_in"].   It  can also be the name of a user-defined comparison func‐
                               tion as described in PROCINFO["sorted_in"].

       asorti(s [, d [, how] ])
                               Return the number of elements in the source array s.  The behavior is  the  same  as
                               that  of  asort(), except that the array indices are used for sorting, not the array
                               values.  When done, the array is indexed numerically, and the values  are  those  of
                               the  original indices.  The original values are lost; thus provide a second array if
                               you wish to preserve the original.  The purpose of the optional string  how  is  the
                               same as described in asort() above.

       gensub(r, s, h [, t])   Search  the  target  string  t  for  matches of the regular expression r.  If h is a
                               string beginning with g or G, then replace all matches of r with s.  Otherwise, h is
                               a  number  indicating  which  match  of  r to replace.  If t is not supplied, use $0
                               instead.  Within the replacement text s, the sequence \n, where n is a digit from  1
                               to 9, may be used to indicate just the text that matched the n'th parenthesized sub‐
                               expression.  The sequence \0 represents the entire matched text, as does the charac‐
                               ter  &.   Unlike  sub() and gsub(), the modified string is returned as the result of
                               the function, and the original target string is not changed.

       gsub(r, s [, t])        For each substring matching the regular expression r in the string t, substitute the
                               string s, and return the number of substitutions.  If t is not supplied, use $0.  An
                               & in the replacement text is replaced with the text that was actually matched.   Use
                               \&  to  get a literal &.  (This must be typed as "\\&"; see GAWK: Effective AWK Pro‐
                               gramming for a fuller discussion of  the  rules  for  &'s  and  backslashes  in  the
                               replacement text of sub(), gsub(), and gensub().)

       index(s, t)             Return  the  index of the string t in the string s, or 0 if t is not present.  (This
                               implies that character indices start at one.)

       length([s])             Return the length of the string s, or the length of $0 if s is not supplied.   As  a
                               non-standard  extension, with an array argument, length() returns the number of ele‐
                               ments in the array.

       match(s, r [, a])       Return the position in s where the regular expression r occurs, or 0  if  r  is  not
                               present,  and set the values of RSTART and RLENGTH.  Note that the argument order is
                               the same as for the ~ operator: str ~ re.  If array a is provided, a is cleared  and
                               then  elements  1  through n are filled with the portions of s that match the corre‐
                               sponding parenthesized subexpression in r.  The 0'th element of a contains the  por‐
                               tion of s matched by the entire regular expression r.  Subscripts a[n, "start"], and
                               a[n, "length"] provide the starting index in the string and length respectively,  of
                               each matching substring.

       patsplit(s, a [, r [, seps] ])
                               Split  the  string  s  into the array a and the separators array seps on the regular
                               expression r, and return the number of fields.  Element values are the portions of s
                               that  matched  r.   The  value of seps[i] is the separator that appeared in front of
                               a[i+1].  If r is omitted, FPAT is used instead.  The arrays a and seps  are  cleared
                               first.  Splitting behaves identically to field splitting with FPAT, described above.

       split(s, a [, r [, seps] ])
                               Split  the  string  s  into the array a and the separators array seps on the regular
                               expression r, and return the number of fields.  If r is omitted, FS is used instead.
                               The  arrays a and seps are cleared first.  seps[i] is the field separator matched by
                               r between a[i] and a[i+1].  If r is a single space, then  leading  whitespace  in  s
                               goes  into  the  extra  array  element seps[0] and trailing whitespace goes into the
                               extra array element seps[n], where n is the return value of split(s,  a,  r,  seps).
                               Splitting behaves identically to field splitting, described above.

       sprintf(fmt, expr-list) Prints expr-list according to fmt, and returns the resulting string.

       strtonum(str)           Examine  str,  and  return  its numeric value.  If str begins with a leading 0, str‐
                               tonum() assumes that str is an octal number.  If str begins with a leading 0x or 0X,
                               strtonum() assumes that str is a hexadecimal number.  Otherwise, decimal is assumed.

       sub(r, s [, t])         Just like gsub(), but replace only the first matching substring.

       substr(s, i [, n])      Return  the  at most n-character substring of s starting at i.  If n is omitted, use
                               the rest of s.

       tolower(str)            Return a copy of the string str, with all the uppercase characters in str translated
                               to  their  corresponding lowercase counterparts.  Non-alphabetic characters are left
                               unchanged.

       toupper(str)            Return a copy of the string str, with all the lowercase characters in str translated
                               to  their  corresponding uppercase counterparts.  Non-alphabetic characters are left
                               unchanged.

       Gawk is multibyte aware.  This means that index(), length(), substr() and match() all work in terms of char‐
       acters, not bytes.

   Time Functions
       Since  one  of the primary uses of AWK programs is processing log files that contain time stamp information,
       gawk provides the following functions for obtaining time stamps and formatting them.

       mktime(datespec)
                 Turn datespec into a time stamp of the same form as returned by systime(), and return the  result.
                 The  datespec  is  a string of the form YYYY MM DD HH MM SS[ DST].  The contents of the string are
                 six or seven numbers representing respectively the full year including century, the month  from  1
                 to  12,  the day of the month from 1 to 31, the hour of the day from 0 to 23, the minute from 0 to
                 59, the second from 0 to 60, and an optional daylight saving flag.  The values  of  these  numbers
                 need  not be within the ranges specified; for example, an hour of -1 means 1 hour before midnight.
                 The origin-zero Gregorian calendar is assumed, with year 0 preceding year 1 and year -1  preceding
                 year  0.   The  time is assumed to be in the local timezone.  If the daylight saving flag is posi‐
                 tive, the time is assumed to be daylight saving time; if zero, the time is assumed to be  standard
                 time;  and  if negative (the default), mktime() attempts to determine whether daylight saving time
                 is in effect for the specified time.  If datespec does not  contain  enough  elements  or  if  the
                 resulting time is out of range, mktime() returns -1.

       strftime([format [, timestamp[, utc-flag]]])
                 Format timestamp according to the specification in format.  If utc-flag is present and is non-zero
                 or non-null, the result is in UTC, otherwise the result is in local time.  The timestamp should be
                 of  the  same  form as returned by systime().  If timestamp is missing, the current time of day is
                 used.  If format is missing, a default format equivalent to the output of date(1)  is  used.   The
                 default  format  is  available  in PROCINFO["strftime"].  See the specification for the strftime()
                 function in ANSI C for the format conversions that are guaranteed to be available.

       systime() Return the current time of day as the number of seconds since the Epoch (1970-01-01  00:00:00  UTC
                 on POSIX systems).

   Bit Manipulations Functions
       Gawk  supplies  the following bit manipulation functions.  They work by converting double-precision floating
       point values to uintmax_t integers, doing the operation, and then converting the  result  back  to  floating
       point.  The functions are:

       and(v1, v2)         Return the bitwise AND of the values provided by v1 and v2.

       compl(val)          Return the bitwise complement of val.

       lshift(val, count)  Return the value of val, shifted left by count bits.

       or(v1, v2)          Return the bitwise OR of the values provided by v1 and v2.

       rshift(val, count)  Return the value of val, shifted right by count bits.

       xor(v1, v2)         Return the bitwise XOR of the values provided by v1 and v2.

   Type Function
       The following function is for use with multidimensional arrays.

       isarray(x)
              Return true if x is an array, false otherwise.

   Internationalization Functions
       The  following  functions may be used from within your AWK program for translating strings at run-time.  For
       full details, see GAWK: Effective AWK Programming.

       bindtextdomain(directory [, domain])
              Specify the directory where gawk looks for the .mo files, in case they will not or cannot  be  placed
              in  the  ``standard''  locations  (e.g.,  during  testing).  It returns the directory where domain is
              ``bound.''
              The default domain is the value of TEXTDOMAIN.  If directory is the  null  string  (""),  then  bind‐
              textdomain() returns the current binding for the given domain.

       dcgettext(string [, domain [, category]])
              Return  the  translation  of  string in text domain domain for locale category category.  The default
              value for domain is the current value of TEXTDOMAIN.  The default  value  for  category  is  "LC_MES‐
              SAGES".
              If  you  supply a value for category, it must be a string equal to one of the known locale categories
              described in GAWK: Effective AWK Programming.  You must also supply a text domain.  Use TEXTDOMAIN if
              you want to use the current domain.

       dcngettext(string1 , string2 , number [, domain [, category]])
              Return  the  plural  form  used  for  number of the translation of string1 and string2 in text domain
              domain for locale category category.  The default value for domain is the current  value  of  TEXTDO‐
              MAIN.  The default value for category is "LC_MESSAGES".
              If  you  supply a value for category, it must be a string equal to one of the known locale categories
              described in GAWK: Effective AWK Programming.  You must also supply a text domain.  Use TEXTDOMAIN if
              you want to use the current domain.

USER-DEFINED FUNCTIONS
       Functions in AWK are defined as follows:

              function name(parameter list) { statements }

       Functions  are  executed when they are called from within expressions in either patterns or actions.  Actual
       parameters supplied in the function call are used to instantiate the formal parameters declared in the func‐
       tion.  Arrays are passed by reference, other variables are passed by value.

       Since  functions  were  not originally part of the AWK language, the provision for local variables is rather
       clumsy: They are declared as extra parameters in the parameter list.  The convention is  to  separate  local
       variables from real parameters by extra spaces in the parameter list.  For example:

              function  f(p, q,     a, b)   # a and b are local
              {
                   ...
              }

              /abc/     { ... ; f(1, 2) ; ... }

       The  left  parenthesis  in  a function call is required to immediately follow the function name, without any
       intervening whitespace.  This avoids a syntactic ambiguity with the concatenation operator.   This  restric‐
       tion does not apply to the built-in functions listed above.

       Functions  may  call  each other and may be recursive.  Function parameters used as local variables are ini‐
       tialized to the null string and the number zero upon function invocation.

       Use return expr to return a value from a function.  The return value is undefined if no value  is  provided,
       or if the function returns by “falling off” the end.

       As  a  gawk extension, functions may be called indirectly. To do this, assign the name of the function to be
       called, as a string, to a variable.  Then use the variable as if it were the name of  a  function,  prefixed
       with an @ sign, like so:
              function  myfunc()
              {
                   print "myfunc called"
                   ...
              }

              {    ...
                   the_func = "myfunc"
                   @the_func()    # call through the_func to myfunc
                   ...
              }

       If  --lint has been provided, gawk warns about calls to undefined functions at parse time, instead of at run
       time.  Calling an undefined function at run time is a fatal error.

       The word func may be used in place of function.

DYNAMICALLY LOADING NEW FUNCTIONS
       You can dynamically add new built-in functions to the running gawk interpreter.  The full details are beyond
       the scope of this manual page; see GAWK: Effective AWK Programming for the details.

       extension(object, function)
               Dynamically link the shared object file named by object, and invoke function in that object, to per‐
               form initialization.  These should both be provided as strings.  Return the value returned by  func‐
               tion.

       Using this feature at the C level is not pretty, but it is unlikely to go away. Additional mechanisms may be
       added at some point.

SIGNALS
       pgawk accepts two signals.  SIGUSR1 causes it to dump a profile and function call stack to the profile file,
       which  is  either  awkprof.out,  or whatever file was named with the --profile option.  It then continues to
       run.  SIGHUP causes pgawk to dump the profile and function call stack and then exit.

INTERNATIONALIZATION
       String constants are sequences of characters enclosed in double quotes.  In  non-English  speaking  environ‐
       ments,  it is possible to mark strings in the AWK program as requiring translation to the local natural lan‐
       guage. Such strings are marked in the AWK program with a leading underscore (“_”).  For example,

              gawk 'BEGIN { print "hello, world" }'

       always prints hello, world.  But,

              gawk 'BEGIN { print _"hello, world" }'

       might print bonjour, monde in France.

       There are several steps involved in producing and running a localizable AWK program.

       1.  Add a BEGIN action to assign a value to the TEXTDOMAIN variable to set the text domain to a name associ‐
           ated with your program:

           BEGIN { TEXTDOMAIN = "myprog" }

       This  allows  gawk to find the .mo file associated with your program.  Without this step, gawk uses the mes‐
       sages text domain, which likely does not contain translations for your program.

       2.  Mark all strings that should be translated with leading underscores.

       3.  If necessary, use the dcgettext() and/or bindtextdomain() functions in your program, as appropriate.

       4.  Run gawk --gen-pot -f myprog.awk > myprog.pot to generate a .po file for your program.

       5.  Provide appropriate translations, and build and install the corresponding .mo files.

       The internationalization features are described in full detail in GAWK: Effective AWK Programming.

POSIX COMPATIBILITY
       A primary goal for gawk is compatibility with the POSIX standard, as well as with the latest version of UNIX
       awk.   To this end, gawk incorporates the following user visible features which are not described in the AWK
       book, but are part of the Bell Laboratories version of awk, and are in the POSIX standard.

       The book indicates that command line variable assignment happens when awk would otherwise open the  argument
       as  a  file,  which is after the BEGIN block is executed.  However, in earlier implementations, when such an
       assignment appeared before any file names, the assignment would happen  before  the  BEGIN  block  was  run.
       Applications  came  to  depend  on  this “feature.”  When awk was changed to match its documentation, the -v
       option for assigning variables before program execution was added to accommodate applications that  depended
       upon the old behavior.  (This feature was agreed upon by both the Bell Laboratories and the GNU developers.)

       When processing arguments, gawk uses the special option “--” to signal the end of arguments.  In compatibil‐
       ity mode, it warns about but otherwise ignores undefined options.  In normal operation, such  arguments  are
       passed on to the AWK program for it to process.

       The  AWK book does not define the return value of srand().  The POSIX standard has it return the seed it was
       using, to allow keeping track of random number sequences.  Therefore srand() in gawk also returns  its  cur‐
       rent seed.

       Other  new  features  are:  The use of multiple -f options (from MKS awk); the ENVIRON array; the \a, and \v
       escape sequences (done originally in gawk and fed back into the Bell Laboratories  version);  the  tolower()
       and  toupper() built-in functions (from the Bell Laboratories version); and the ANSI C conversion specifica‐
       tions in printf (done first in the Bell Laboratories version).

HISTORICAL FEATURES
       There is one feature of historical AWK implementations that gawk  supports:  It  is  possible  to  call  the
       length() built-in function not only with no argument, but even without parentheses!  Thus,

              a = length     # Holy Algol 60, Batman!

       is the same as either of

              a = length()
              a = length($0)

       Using  this  feature is poor practice, and gawk issues a warning about its use if --lint is specified on the
       command line.

GNU EXTENSIONS
       Gawk has a number of extensions to POSIX awk.  They are described  in  this  section.   All  the  extensions
       described here can be disabled by invoking gawk with the --traditional or --posix options.

       The following features of gawk are not available in POSIX awk.

       · No path search is performed for files named via the -f option.  Therefore the AWKPATH environment variable
         is not special.

       · There is no facility for doing file inclusion (gawk's @include mechanism).

       · The \x escape sequence.  (Disabled with --posix.)

       · The ability to continue lines after ?  and :.  (Disabled with --posix.)

       · Octal and hexadecimal constants in AWK programs.

       · The ARGIND, BINMODE, ERRNO, LINT, RT and TEXTDOMAIN variables are not special.

       · The IGNORECASE variable and its side-effects are not available.

       · The FIELDWIDTHS variable and fixed-width field splitting.

       · The FPAT variable and field splitting based on field values.

       · The PROCINFO array is not available.

       · The use of RS as a regular expression.

       · The special file names available for I/O redirection are not recognized.

       · The |& operator for creating co-processes.

       · The BEGINFILE and ENDFILE special patterns are not available.

       · The ability to split out individual characters using the null string as the value of FS, and as the  third
         argument to split().

       · An optional fourth argument to split() to receive the separator texts.

       · The optional second argument to the close() function.

       · The optional third argument to the match() function.

       · The ability to use positional specifiers with printf and sprintf().

       · The ability to pass an array to length().

       · The use of delete array to delete the entire contents of an array.

       · The use of nextfile to abandon processing of the current input file.

       · The  and(),  asort(),  asorti(), bindtextdomain(), compl(), dcgettext(), dcngettext(), gensub(), lshift(),
         mktime(), or(), patsplit(), rshift(), strftime(), strtonum(), systime() and xor() functions.

       · Localizable strings.

       · Adding new built-in functions dynamically with the extension() function.

       The AWK book does not define the return value of the close() function.  Gawk's  close()  returns  the  value
       from  fclose(3),  or pclose(3), when closing an output file or pipe, respectively.  It returns the process's
       exit status when closing an input pipe.  The return value is -1 if the named file, pipe  or  co-process  was
       not opened with a redirection.

       When  gawk  is invoked with the --traditional option, if the fs argument to the -F option is “t”, then FS is
       set to the tab character.  Note that typing gawk -F\t ...  simply causes the shell to  quote  the  “t,”  and
       does not pass “\t” to the -F option.  Since this is a rather ugly special case, it is not the default behav‐
       ior.  This behavior also does not occur if --posix has been specified.  To really get a tab character as the
       field separator, it is best to use single quotes: gawk -F'\t' ....

ENVIRONMENT VARIABLES
       The  AWKPATH environment variable can be used to provide a list of directories that gawk searches when look‐
       ing for files named via the -f and --file options.

       For socket communication, two special environment variables can be used to control  the  number  of  retries
       (GAWK_SOCK_RETRIES),  and  the interval between retries (GAWK_MSEC_SLEEP).  The interval is in milliseconds.
       On systems that do not support usleep(3), the value is rounded up to an integral number of seconds.

       If POSIXLY_CORRECT exists in the environment, then gawk behaves exactly as if --posix had been specified  on
       the command line.  If --lint has been specified, gawk issues a warning message to this effect.

EXIT STATUS
       If the exit statement is used with a value, then gawk exits with the numeric value given to it.

       Otherwise, if there were no problems during execution, gawk exits with the value of the C constant EXIT_SUC‐
       CESS.  This is usually zero.

       If an error occurs, gawk exits with the value of the C constant EXIT_FAILURE.  This is usually one.

       If gawk exits because of a fatal error, the exit status is 2.  On  non-POSIX  systems,  this  value  may  be
       mapped to EXIT_FAILURE.

VERSION INFORMATION
       This man page documents gawk, version 4.0.

AUTHORS
       The  original  version  of  UNIX awk was designed and implemented by Alfred Aho, Peter Weinberger, and Brian
       Kernighan of Bell Laboratories.  Brian Kernighan continues to maintain and enhance it.

       Paul Rubin and Jay Fenlason, of the Free Software Foundation, wrote gawk, to be compatible with the original
       version  of  awk  distributed in Seventh Edition UNIX.  John Woods contributed a number of bug fixes.  David
       Trueman, with contributions from Arnold Robbins, made gawk compatible with the  new  version  of  UNIX  awk.
       Arnold Robbins is the current maintainer.

       The initial DOS port was done by Conrad Kwok and Scott Garfinkle.  Scott Deifik maintains the port to MS-DOS
       using DJGPP.  Eli Zaretskii maintains the port to MS-Windows using MinGW.  Pat Rankin did the port  to  VMS,
       and  Michal Jaegermann did the port to the Atari ST.  The port to OS/2 was done by Kai Uwe Rommel, with con‐
       tributions and help from Darrel Hankerson.  Andreas Buening now maintains the OS/2 port.  The late Fred Fish
       supplied support for the Amiga, and Martin Brown provided the BeOS port.  Stephen Davies provided the origi‐
       nal Tandem port, and Matthew Woehlke provided changes for Tandem's POSIX-compliant systems.  Dave Pitts pro‐
       vided the port to z/OS.

       See  the  README  file in the gawk distribution for up-to-date information about maintainers and which ports
       are currently supported.

BUG REPORTS
       If you find a bug in gawk, please send electronic mail to bug-gawk@gnu.org.  Please include  your  operating
       system and its revision, the version of gawk (from gawk --version), which C compiler you used to compile it,
       and a test program and data that are as small as possible for reproducing the problem.

       Before sending a bug report, please do the following things.  First, verify that you have the latest version
       of  gawk.  Many bugs (usually subtle ones) are fixed at each release, and if yours is out of date, the prob‐
       lem may already have been solved.  Second, please see if setting the environment variable LC_ALL to LC_ALL=C
       causes  things  to  behave  as  you  expect. If so, it's a locale issue, and may or may not really be a bug.
       Finally, please read this man page and the reference manual carefully to be sure that what you  think  is  a
       bug really is, instead of just a quirk in the language.

       Whatever  you  do,  do  NOT post a bug report in comp.lang.awk.  While the gawk developers occasionally read
       this newsgroup, posting bug reports there is an unreliable way to report  bugs.   Instead,  please  use  the
       electronic mail addresses given above.

       If  you're  using a GNU/Linux or BSD-based system, you may wish to submit a bug report to the vendor of your
       distribution.  That's fine, but please send a copy to the official email address as well, since  there's  no
       guarantee that the bug report will be forwarded to the gawk maintainer.

BUGS
       The -F option is not necessary given the command line variable assignment feature; it remains only for back‐
       wards compatibility.

       Syntactically invalid single character programs tend to  overflow  the  parse  stack,  generating  a  rather
       unhelpful message.  Such programs are surprisingly difficult to diagnose in the completely general case, and
       the effort to do so really is not worth it.

SEE ALSO
       egrep(1), getpid(2), getppid(2), getpgrp(2), getuid(2),  geteuid(2),  getgid(2),  getegid(2),  getgroups(2),
       usleep(3)

       The  AWK Programming Language, Alfred V. Aho, Brian W. Kernighan, Peter J. Weinberger, Addison-Wesley, 1988.
       ISBN 0-201-07981-X.

       GAWK: Effective AWK Programming, Edition 4.0, shipped with the gawk source.  The  current  version  of  this
       document is available online at http://www.gnu.org/software/gawk/manual.

EXAMPLES
       Print and sort the login names of all users:

            BEGIN     { FS = ":" }
                 { print $1 | "sort" }

       Count lines in a file:

                 { nlines++ }
            END  { print nlines }

       Precede each line by its number in the file:

            { print FNR, $0 }

       Concatenate and line number (a variation on a theme):

            { print NR, $0 }

       Run an external command for particular lines of data:

            tail -f access_log |
            awk '/myhome.html/ { system("nmap " $1 ">> logdir/myhome.html") }'

ACKNOWLEDGEMENTS
       Brian  Kernighan  of  Bell Laboratories provided valuable assistance during testing and debugging.  We thank
       him.

COPYING PERMISSIONS
       Copyright © 1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2001, 2002, 2003, 2004, 2005,  2007,
       2009, 2010, 2011 Free Software Foundation, Inc.

       Permission  is  granted  to  make  and distribute verbatim copies of this manual page provided the copyright
       notice and this permission notice are preserved on all copies.

       Permission is granted to copy and distribute modified versions of this manual page under the conditions  for
       verbatim  copying,  provided that the entire resulting derived work is distributed under the terms of a per‐
       mission notice identical to this one.

       Permission is granted to copy and distribute translations of this manual page into another  language,  under
       the  above  conditions for modified versions, except that this permission notice may be stated in a transla‐
       tion approved by the Foundation.



Free Software Foundation                            Dec 07 2012                                             GAWK(1)
SED(1)                                             User Commands                                             SED(1)



NAME
       sed - stream editor for filtering and transforming text

SYNOPSIS
       sed [OPTION]... {script-only-if-no-other-script} [input-file]...

DESCRIPTION
       Sed is a stream editor.  A stream editor is used to perform basic text transformations on an input stream (a
       file or input from a pipeline).  While in some ways similar to an editor which permits scripted edits  (such
       as  ed), sed works by making only one pass over the input(s), and is consequently more efficient.  But it is
       sed's ability to filter text in a pipeline which particularly distinguishes it from other types of editors.

       -n, --quiet, --silent

              suppress automatic printing of pattern space

       -e script, --expression=script

              add the script to the commands to be executed

       -f script-file, --file=script-file

              add the contents of script-file to the commands to be executed

       --follow-symlinks

              follow symlinks when processing in place

       -i[SUFFIX], --in-place[=SUFFIX]

              edit files in place (makes backup if SUFFIX supplied)

       -c, --copy

              use copy instead of rename when shuffling files in -i mode

       -b, --binary

              does nothing; for compatibility with WIN32/CYGWIN/MSDOS/EMX ( open files in binary mode  (CR+LFs  are
              not treated specially))

       -l N, --line-length=N

              specify the desired line-wrap length for the `l' command

       --posix

              disable all GNU extensions.

       -r, --regexp-extended

              use extended regular expressions in the script.

       -s, --separate

              consider files as separate rather than as a single continuous long stream.

       -u, --unbuffered

              load minimal amounts of data from the input files and flush the output buffers more often

       -z, --null-data

              separate lines by NUL characters

       --help

              display this help and exit

       --version

              output version information and exit

       If  no  -e,  --expression, -f, or --file option is given, then the first non-option argument is taken as the
       sed script to interpret.  All remaining arguments are names of input files; if no input files are specified,
       then the standard input is read.

       GNU    sed    home   page:   <http://www.gnu.org/software/sed/>.    General   help   using   GNU   software:
       <http://www.gnu.org/gethelp/>.  E-mail bug reports to: <bug-sed@gnu.org>.   Be  sure  to  include  the  word
       ``sed'' somewhere in the ``Subject:'' field.

COMMAND SYNOPSIS
       This  is  just  a brief synopsis of sed commands to serve as a reminder to those who already know sed; other
       documentation (such as the texinfo document) must be consulted for fuller descriptions.

   Zero-address ``commands''
       : label
              Label for b and t commands.

       #comment
              The comment extends until the next newline (or the end of a -e script fragment).

       }      The closing bracket of a { } block.

   Zero- or One- address commands
       =      Print the current line number.

       a \

       text   Append text, which has each embedded newline preceded by a backslash.

       i \

       text   Insert text, which has each embedded newline preceded by a backslash.

       q [exit-code]
              Immediately quit the sed script without processing any more input, except that if auto-print  is  not
              disabled the current pattern space will be printed.  The exit code argument is a GNU extension.

       Q [exit-code]
              Immediately quit the sed script without processing any more input.  This is a GNU extension.

       r filename
              Append text read from filename.

       R filename
              Append  a  line read from filename.  Each invocation of the command reads a line from the file.  This
              is a GNU extension.

   Commands which accept address ranges
       {      Begin a block of commands (end with a }).

       b label
              Branch to label; if label is omitted, branch to end of script.

       c \

       text   Replace the selected lines with text, which has each embedded newline preceded by a backslash.

       d      Delete pattern space.  Start next cycle.

       D      If pattern space contains no newline, start a normal new cycle as if the d command was issued.   Oth‐
              erwise,  delete  text in the pattern space up to the first newline, and restart cycle with the resul‐
              tant pattern space, without reading a new line of input.

       h H    Copy/append pattern space to hold space.

       g G    Copy/append hold space to pattern space.

       l      List out the current line in a ``visually unambiguous'' form.

       l width
              List out the current line in a ``visually unambiguous'' form, breaking it at width characters.   This
              is a GNU extension.

       n N    Read/append the next line of input into the pattern space.

       p      Print the current pattern space.

       P      Print up to the first embedded newline of the current pattern space.

       s/regexp/replacement/
              Attempt  to match regexp against the pattern space.  If successful, replace that portion matched with
              replacement.  The replacement may contain the special character & to refer to  that  portion  of  the
              pattern  space  which  matched,  and  the special escapes \1 through \9 to refer to the corresponding
              matching sub-expressions in the regexp.

       t label
              If a s/// has done a successful substitution since the last input line was read and since the last  t
              or T command, then branch to label; if label is omitted, branch to end of script.

       T label
              If no s/// has done a successful substitution since the last input line was read and since the last t
              or T command, then branch to label; if label is omitted, branch to end of  script.   This  is  a  GNU
              extension.

       w filename
              Write the current pattern space to filename.

       W filename
              Write the first line of the current pattern space to filename.  This is a GNU extension.

       x      Exchange the contents of the hold and pattern spaces.

       y/source/dest/
              Transliterate the characters in the pattern space which appear in source to the corresponding charac‐
              ter in dest.

Addresses
       Sed commands can be given with no addresses, in which case the command will be executed for all input lines;
       with  one address, in which case the command will only be executed for input lines which match that address;
       or with two addresses, in which case the command will be executed for all input lines which match the inclu‐
       sive  range  of lines starting from the first address and continuing to the second address.  Three things to
       note about address ranges: the syntax is addr1,addr2 (i.e., the addresses are separated  by  a  comma);  the
       line  which  addr1 matched will always be accepted, even if addr2 selects an earlier line; and if addr2 is a
       regexp, it will not be tested against the line that addr1 matched.

       After the address (or address-range), and before the command, a !  may be inserted, which specifies that the
       command shall only be executed if the address (or address-range) does not match.

       The following address types are supported:

       number Match  only  the  specified  line  number  (which increments cumulatively across files, unless the -s
              option is specified on the command line).

       first~step
              Match every step'th line starting with line first.  For example, ``sed -n 1~2p'' will print  all  the
              odd-numbered  lines  in  the  input stream, and the address 2~5 will match every fifth line, starting
              with the second.  first can be zero; in this case, sed operates as if it were equal to  step.   (This
              is an extension.)

       $      Match the last line.

       /regexp/
              Match lines matching the regular expression regexp.

       \cregexpc
              Match lines matching the regular expression regexp.  The c may be any character.

       GNU sed also supports some special 2-address forms:

       0,addr2
              Start out in "matched first address" state, until addr2 is found.  This is similar to 1,addr2, except
              that if addr2 matches the very first line of input the 0,addr2 form will be at the end of its  range,
              whereas  the 1,addr2 form will still be at the beginning of its range.  This works only when addr2 is
              a regular expression.

       addr1,+N
              Will match addr1 and the N lines following addr1.

       addr1,~N
              Will match addr1 and the lines following addr1 until the next line whose input line number is a  mul‐
              tiple of N.

REGULAR EXPRESSIONS
       POSIX.2  BREs  should  be  supported,  but  they  aren't completely because of performance problems.  The \n
       sequence in a regular expression matches the  newline  character,  and  similarly  for  \a,  \t,  and  other
       sequences.

BUGS
       E-mail  bug reports to bug-sed@gnu.org.  Also, please include the output of ``sed --version'' in the body of
       your report if at all possible.

AUTHOR
       Written  by  Jay  Fenlason,  Tom  Lord,  Ken   Pizzini,   and   Paolo   Bonzini.    GNU   sed   home   page:
       <http://www.gnu.org/software/sed/>.  General help using GNU software: <http://www.gnu.org/gethelp/>.  E-mail
       bug reports to: <bug-sed@gnu.org>.  Be sure to include the word ``sed'' somewhere in the ``Subject:'' field.

COPYRIGHT
       Copyright  ©  2012  Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version   3   or   later
       <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent per‐
       mitted by law.

SEE ALSO
       awk(1), ed(1), grep(1), tr(1), perlre(1), sed.info, any of various books on sed, the sed FAQ
       (http://sed.sf.net/grabbag/tutorials/sedfaq.txt), http://sed.sf.net/grabbag/.

       The full documentation for sed is maintained as a Texinfo manual.  If the info and sed programs are properly
       installed at your site, the command

              info sed

       should give you access to the complete manual.



sed 4.2.2                                          September 2020                                            SED(1)
CP(1)                                              User Commands                                              CP(1)



NAME
       cp - copy files and directories

SYNOPSIS
       cp [OPTION]... [-T] SOURCE DEST
       cp [OPTION]... SOURCE... DIRECTORY
       cp [OPTION]... -t DIRECTORY SOURCE...

DESCRIPTION
       Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --archive
              same as -dR --preserve=all

       --attributes-only
              don't copy the file data, just the attributes

       --backup[=CONTROL]
              make a backup of each existing destination file

       -b     like --backup but does not accept an argument

       --copy-contents
              copy contents of special files when recursive

       -d     same as --no-dereference --preserve=links

       -f, --force
              if  an  existing  destination  file cannot be opened, remove it and try again (this option is ignored
              when the -n option is also used)

       -i, --interactive
              prompt before overwrite (overrides a previous -n option)

       -H     follow command-line symbolic links in SOURCE

       -l, --link
              hard link files instead of copying

       -L, --dereference
              always follow symbolic links in SOURCE

       -n, --no-clobber
              do not overwrite an existing file (overrides a previous -i option)

       -P, --no-dereference
              never follow symbolic links in SOURCE

       -p     same as --preserve=mode,ownership,timestamps

       --preserve[=ATTR_LIST]
              preserve the  specified  attributes  (default:  mode,ownership,timestamps),  if  possible  additional
              attributes: context, links, xattr, all

       -c     deprecated, same as --preserve=context

       --no-preserve=ATTR_LIST
              don't preserve the specified attributes

       --parents
              use full source file name under DIRECTORY

       -R, -r, --recursive
              copy directories recursively

       --reflink[=WHEN]
              control clone/CoW copies. See below

       --remove-destination
              remove each existing destination file before attempting to open it (contrast with --force)

       --sparse=WHEN
              control creation of sparse files. See below

       --strip-trailing-slashes
              remove any trailing slashes from each SOURCE argument

       -s, --symbolic-link
              make symbolic links instead of copying

       -S, --suffix=SUFFIX
              override the usual backup suffix

       -t, --target-directory=DIRECTORY
              copy all SOURCE arguments into DIRECTORY

       -T, --no-target-directory
              treat DEST as a normal file

       -u, --update
              copy  only  when  the  SOURCE file is newer than the destination file or when the destination file is
              missing

       -v, --verbose
              explain what is being done

       -x, --one-file-system
              stay on this file system

       -Z     set SELinux security context of destination file to default type

       --context[=CTX]
              like -Z, or if CTX is specified then set the SELinux or SMACK security context to CTX

       --help display this help and exit

       --version
              output version information and exit

       By default, sparse SOURCE files are detected by a crude heuristic and the corresponding DEST  file  is  made
       sparse as well.  That is the behavior selected by --sparse=auto.  Specify --sparse=always to create a sparse
       DEST file whenever the SOURCE file contains a long enough sequence of zero  bytes.   Use  --sparse=never  to
       inhibit creation of sparse files.

       When --reflink[=always] is specified, perform a lightweight copy, where the data blocks are copied only when
       modified.  If this is not possible the copy fails, or if --reflink=auto is specified, fall back to  a  stan‐
       dard copy.

       The  backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.  The version control method may
       be selected via the --backup option or through the VERSION_CONTROL environment variable.  Here are the  val‐
       ues:

       none, off
              never make backups (even if --backup is given)

       numbered, t
              make numbered backups

       existing, nil
              numbered if numbered backups exist, simple otherwise

       simple, never
              always make simple backups

       As  a  special  case, cp makes a backup of SOURCE when the force and backup options are given and SOURCE and
       DEST are the same name for an existing, regular file.

       GNU  coreutils  online  help:  <http://www.gnu.org/software/coreutils/>  Report  cp  translation   bugs   to
       <http://translationproject.org/team/>

AUTHOR
       Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.

COPYRIGHT
       Copyright   ©   2013   Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version  3  or  later
       <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent per‐
       mitted by law.

SEE ALSO
       The  full  documentation for cp is maintained as a Texinfo manual.  If the info and cp programs are properly
       installed at your site, the command

              info coreutils 'cp invocation'

       should give you access to the complete manual.



GNU coreutils 8.22                                 November 2020                                              CP(1)
MV(1)                                              User Commands                                              MV(1)



NAME
       mv - move (rename) files

SYNOPSIS
       mv [OPTION]... [-T] SOURCE DEST
       mv [OPTION]... SOURCE... DIRECTORY
       mv [OPTION]... -t DIRECTORY SOURCE...

DESCRIPTION
       Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.

       Mandatory arguments to long options are mandatory for short options too.

       --backup[=CONTROL]
              make a backup of each existing destination file

       -b     like --backup but does not accept an argument

       -f, --force
              do not prompt before overwriting

       -i, --interactive
              prompt before overwrite

       -n, --no-clobber
              do not overwrite an existing file

       If you specify more than one of -i, -f, -n, only the final one takes effect.

       --strip-trailing-slashes
              remove any trailing slashes from each SOURCE argument

       -S, --suffix=SUFFIX
              override the usual backup suffix

       -t, --target-directory=DIRECTORY
              move all SOURCE arguments into DIRECTORY

       -T, --no-target-directory
              treat DEST as a normal file

       -u, --update
              move  only  when  the  SOURCE file is newer than the destination file or when the destination file is
              missing

       -v, --verbose
              explain what is being done

       -Z, --context
              set SELinux security context of destination file to default type

       --help display this help and exit

       --version
              output version information and exit

       The backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.  The version control method  may
       be  selected via the --backup option or through the VERSION_CONTROL environment variable.  Here are the val‐
       ues:

       none, off
              never make backups (even if --backup is given)

       numbered, t
              make numbered backups

       existing, nil
              numbered if numbered backups exist, simple otherwise

       simple, never
              always make simple backups

       GNU  coreutils  online  help:  <http://www.gnu.org/software/coreutils/>  Report  mv  translation   bugs   to
       <http://translationproject.org/team/>

AUTHOR
       Written by Mike Parker, David MacKenzie, and Jim Meyering.

COPYRIGHT
       Copyright   ©   2013   Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version  3  or  later
       <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent per‐
       mitted by law.

SEE ALSO
       rename(2)

       The  full  documentation for mv is maintained as a Texinfo manual.  If the info and mv programs are properly
       installed at your site, the command

              info coreutils 'mv invocation'

       should give you access to the complete manual.



GNU coreutils 8.22                                 November 2020                                              MV(1)
CHMOD(1)                                           User Commands                                           CHMOD(1)



NAME
       chmod - change file mode bits

SYNOPSIS
       chmod [OPTION]... MODE[,MODE]... FILE...
       chmod [OPTION]... OCTAL-MODE FILE...
       chmod [OPTION]... --reference=RFILE FILE...

DESCRIPTION
       This  manual  page  documents the GNU version of chmod.  chmod changes the file mode bits of each given file
       according to mode, which can be either a symbolic representation of changes to make, or an octal number rep‐
       resenting the bit pattern for the new mode bits.

       The  format  of a symbolic mode is [ugoa...][[+-=][perms...]...], where perms is either zero or more letters
       from the set rwxXst, or a single letter from the set ugo.  Multiple symbolic modes can be  given,  separated
       by commas.

       A  combination  of  the  letters ugoa controls which users' access to the file will be changed: the user who
       owns it (u), other users in the file's group (g), other users not in the file's group (o), or all users (a).
       If  none  of  these  are given, the effect is as if a were given, but bits that are set in the umask are not
       affected.

       The operator + causes the selected file mode bits to be added to the existing file mode bits of each file; -
       causes  them  to  be removed; and = causes them to be added and causes unmentioned bits to be removed except
       that a directory's unmentioned set user and group ID bits are not affected.

       The letters rwxXst select file mode bits for the affected users: read (r), write (w), execute (or search for
       directories)  (x), execute/search only if the file is a directory or already has execute permission for some
       user (X), set user or group ID on execution (s), restricted deletion flag or sticky bit (t).  Instead of one
       or  more  of  these  letters, you can specify exactly one of the letters ugo: the permissions granted to the
       user who owns the file (u), the permissions granted to other users who are members of the file's group  (g),
       and the permissions granted to users that are in neither of the two preceding categories (o).

       A  numeric  mode is from one to four octal digits (0-7), derived by adding up the bits with values 4, 2, and
       1.  Omitted digits are assumed to be leading zeros.  The first digit selects the set user  ID  (4)  and  set
       group ID (2) and restricted deletion or sticky (1) attributes.  The second digit selects permissions for the
       user who owns the file: read (4), write (2), and execute (1); the third selects permissions for other  users
       in  the file's group, with the same values; and the fourth for other users not in the file's group, with the
       same values.

       chmod never changes the permissions of symbolic links; the chmod system call  cannot  change  their  permis‐
       sions.   This  is  not  a problem since the permissions of symbolic links are never used.  However, for each
       symbolic link listed on the command line, chmod changes the permissions of the  pointed-to  file.   In  con‐
       trast, chmod ignores symbolic links encountered during recursive directory traversals.

SETUID AND SETGID BITS
       chmod  clears the set-group-ID bit of a regular file if the file's group ID does not match the user's effec‐
       tive group ID or one of the user's supplementary group IDs, unless  the  user  has  appropriate  privileges.
       Additional  restrictions  may  cause  the  set-user-ID and set-group-ID bits of MODE or RFILE to be ignored.
       This behavior depends on the policy and functionality of the underlying chmod system call.  When  in  doubt,
       check the underlying system behavior.

       chmod  preserves  a  directory's  set-user-ID and set-group-ID bits unless you explicitly specify otherwise.
       You can set or clear the bits with symbolic modes like u+s and g-s, and you can set (but not clear) the bits
       with a numeric mode.

RESTRICTED DELETION FLAG OR STICKY BIT
       The  restricted  deletion flag or sticky bit is a single bit, whose interpretation depends on the file type.
       For directories, it prevents unprivileged users from removing or renaming a file  in  the  directory  unless
       they  own  the  file or the directory; this is called the restricted deletion flag for the directory, and is
       commonly found on world-writable directories like /tmp.  For regular files on some older  systems,  the  bit
       saves  the program's text image on the swap device so it will load more quickly when run; this is called the
       sticky bit.

OPTIONS
       Change the mode of each FILE to MODE.  With --reference, change the mode of each FILE to that of RFILE.

       -c, --changes
              like verbose but report only when a change is made

       -f, --silent, --quiet
              suppress most error messages

       -v, --verbose
              output a diagnostic for every file processed

       --no-preserve-root
              do not treat '/' specially (the default)

       --preserve-root
              fail to operate recursively on '/'

       --reference=RFILE
              use RFILE's mode instead of MODE values

       -R, --recursive
              change files and directories recursively

       --help display this help and exit

       --version
              output version information and exit

       Each MODE is of the form '[ugoa]*([-+=]([rwxXst]*|[ugo]))+|[-+=][0-7]+'.

       GNU coreutils  online  help:  <http://www.gnu.org/software/coreutils/>  Report  chmod  translation  bugs  to
       <http://translationproject.org/team/>

AUTHOR
       Written by David MacKenzie and Jim Meyering.

COPYRIGHT
       Copyright   ©   2013   Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version  3  or  later
       <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent per‐
       mitted by law.

SEE ALSO
       chmod(2)

       The  full  documentation  for  chmod  is maintained as a Texinfo manual.  If the info and chmod programs are
       properly installed at your site, the command

              info coreutils 'chmod invocation'

       should give you access to the complete manual.



GNU coreutils 8.22                                 November 2020                                           CHMOD(1)
